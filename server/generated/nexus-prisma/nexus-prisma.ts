/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Project: ProjectObject
      Department: DepartmentObject
      FeedbackRound: FeedbackRoundObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Script: ScriptObject
      ScriptConnection: ScriptConnectionObject
      ScriptEdge: ScriptEdgeObject
      AggregateScript: AggregateScriptObject
      ProjectConnection: ProjectConnectionObject
      ProjectEdge: ProjectEdgeObject
      AggregateProject: AggregateProjectObject
      FeedbackTarget: FeedbackTargetObject
      FeedbackTargetConnection: FeedbackTargetConnectionObject
      FeedbackTargetEdge: FeedbackTargetEdgeObject
      AggregateFeedbackTarget: AggregateFeedbackTargetObject
      DepartmentConnection: DepartmentConnectionObject
      DepartmentEdge: DepartmentEdgeObject
      AggregateDepartment: AggregateDepartmentObject
      Media: MediaObject
      MediaConnection: MediaConnectionObject
      MediaEdge: MediaEdgeObject
      AggregateMedia: AggregateMediaObject
      FeedbackRoundConnection: FeedbackRoundConnectionObject
      FeedbackRoundEdge: FeedbackRoundEdgeObject
      AggregateFeedbackRound: AggregateFeedbackRoundObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ScriptSubscriptionPayload: ScriptSubscriptionPayloadObject
      ScriptPreviousValues: ScriptPreviousValuesObject
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadObject
      ProjectPreviousValues: ProjectPreviousValuesObject
      FeedbackTargetSubscriptionPayload: FeedbackTargetSubscriptionPayloadObject
      FeedbackTargetPreviousValues: FeedbackTargetPreviousValuesObject
      DepartmentSubscriptionPayload: DepartmentSubscriptionPayloadObject
      DepartmentPreviousValues: DepartmentPreviousValuesObject
      MediaSubscriptionPayload: MediaSubscriptionPayloadObject
      MediaPreviousValues: MediaPreviousValuesObject
      FeedbackRoundSubscriptionPayload: FeedbackRoundSubscriptionPayloadObject
      FeedbackRoundPreviousValues: FeedbackRoundPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Project: ProjectFieldDetails
      Department: DepartmentFieldDetails
      FeedbackRound: FeedbackRoundFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Script: ScriptFieldDetails
      ScriptConnection: ScriptConnectionFieldDetails
      ScriptEdge: ScriptEdgeFieldDetails
      AggregateScript: AggregateScriptFieldDetails
      ProjectConnection: ProjectConnectionFieldDetails
      ProjectEdge: ProjectEdgeFieldDetails
      AggregateProject: AggregateProjectFieldDetails
      FeedbackTarget: FeedbackTargetFieldDetails
      FeedbackTargetConnection: FeedbackTargetConnectionFieldDetails
      FeedbackTargetEdge: FeedbackTargetEdgeFieldDetails
      AggregateFeedbackTarget: AggregateFeedbackTargetFieldDetails
      DepartmentConnection: DepartmentConnectionFieldDetails
      DepartmentEdge: DepartmentEdgeFieldDetails
      AggregateDepartment: AggregateDepartmentFieldDetails
      Media: MediaFieldDetails
      MediaConnection: MediaConnectionFieldDetails
      MediaEdge: MediaEdgeFieldDetails
      AggregateMedia: AggregateMediaFieldDetails
      FeedbackRoundConnection: FeedbackRoundConnectionFieldDetails
      FeedbackRoundEdge: FeedbackRoundEdgeFieldDetails
      AggregateFeedbackRound: AggregateFeedbackRoundFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ScriptSubscriptionPayload: ScriptSubscriptionPayloadFieldDetails
      ScriptPreviousValues: ScriptPreviousValuesFieldDetails
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadFieldDetails
      ProjectPreviousValues: ProjectPreviousValuesFieldDetails
      FeedbackTargetSubscriptionPayload: FeedbackTargetSubscriptionPayloadFieldDetails
      FeedbackTargetPreviousValues: FeedbackTargetPreviousValuesFieldDetails
      DepartmentSubscriptionPayload: DepartmentSubscriptionPayloadFieldDetails
      DepartmentPreviousValues: DepartmentPreviousValuesFieldDetails
      MediaSubscriptionPayload: MediaSubscriptionPayloadFieldDetails
      MediaPreviousValues: MediaPreviousValuesFieldDetails
      FeedbackRoundSubscriptionPayload: FeedbackRoundSubscriptionPayloadFieldDetails
      FeedbackRoundPreviousValues: FeedbackRoundPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      ProjectWhereInput: ProjectWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      FeedbackRoundWhereInput: FeedbackRoundWhereInputInputObject
      DepartmentWhereInput: DepartmentWhereInputInputObject
      ScriptWhereUniqueInput: ScriptWhereUniqueInputInputObject
      ScriptWhereInput: ScriptWhereInputInputObject
      ProjectWhereUniqueInput: ProjectWhereUniqueInputInputObject
      FeedbackTargetWhereUniqueInput: FeedbackTargetWhereUniqueInputInputObject
      FeedbackTargetWhereInput: FeedbackTargetWhereInputInputObject
      DepartmentWhereUniqueInput: DepartmentWhereUniqueInputInputObject
      MediaWhereUniqueInput: MediaWhereUniqueInputInputObject
      MediaWhereInput: MediaWhereInputInputObject
      FeedbackRoundWhereUniqueInput: FeedbackRoundWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      ProjectCreateManyWithoutCreatedByInput: ProjectCreateManyWithoutCreatedByInputInputObject
      ProjectCreateWithoutCreatedByInput: ProjectCreateWithoutCreatedByInputInputObject
      DepartmentCreateManyWithoutProjectsInput: DepartmentCreateManyWithoutProjectsInputInputObject
      DepartmentCreateWithoutProjectsInput: DepartmentCreateWithoutProjectsInputInputObject
      FeedbackRoundCreateManyWithoutUsersInput: FeedbackRoundCreateManyWithoutUsersInputInputObject
      FeedbackRoundCreateWithoutUsersInput: FeedbackRoundCreateWithoutUsersInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      ProjectUpdateManyWithoutCreatedByInput: ProjectUpdateManyWithoutCreatedByInputInputObject
      ProjectUpdateWithWhereUniqueWithoutCreatedByInput: ProjectUpdateWithWhereUniqueWithoutCreatedByInputInputObject
      ProjectUpdateWithoutCreatedByDataInput: ProjectUpdateWithoutCreatedByDataInputInputObject
      DepartmentUpdateManyWithoutProjectsInput: DepartmentUpdateManyWithoutProjectsInputInputObject
      DepartmentUpdateWithWhereUniqueWithoutProjectsInput: DepartmentUpdateWithWhereUniqueWithoutProjectsInputInputObject
      DepartmentUpdateWithoutProjectsDataInput: DepartmentUpdateWithoutProjectsDataInputInputObject
      DepartmentUpsertWithWhereUniqueWithoutProjectsInput: DepartmentUpsertWithWhereUniqueWithoutProjectsInputInputObject
      DepartmentScalarWhereInput: DepartmentScalarWhereInputInputObject
      DepartmentUpdateManyWithWhereNestedInput: DepartmentUpdateManyWithWhereNestedInputInputObject
      DepartmentUpdateManyDataInput: DepartmentUpdateManyDataInputInputObject
      ProjectUpsertWithWhereUniqueWithoutCreatedByInput: ProjectUpsertWithWhereUniqueWithoutCreatedByInputInputObject
      ProjectScalarWhereInput: ProjectScalarWhereInputInputObject
      ProjectUpdateManyWithWhereNestedInput: ProjectUpdateManyWithWhereNestedInputInputObject
      ProjectUpdateManyDataInput: ProjectUpdateManyDataInputInputObject
      FeedbackRoundUpdateManyWithoutUsersInput: FeedbackRoundUpdateManyWithoutUsersInputInputObject
      FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput: FeedbackRoundUpdateWithWhereUniqueWithoutUsersInputInputObject
      FeedbackRoundUpdateWithoutUsersDataInput: FeedbackRoundUpdateWithoutUsersDataInputInputObject
      FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput: FeedbackRoundUpsertWithWhereUniqueWithoutUsersInputInputObject
      FeedbackRoundScalarWhereInput: FeedbackRoundScalarWhereInputInputObject
      FeedbackRoundUpdateManyWithWhereNestedInput: FeedbackRoundUpdateManyWithWhereNestedInputInputObject
      FeedbackRoundUpdateManyDataInput: FeedbackRoundUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ScriptCreateInput: ScriptCreateInputInputObject
      ProjectCreateInput: ProjectCreateInputInputObject
      UserCreateOneWithoutProjectsInput: UserCreateOneWithoutProjectsInputInputObject
      UserCreateWithoutProjectsInput: UserCreateWithoutProjectsInputInputObject
      ProjectUpdateInput: ProjectUpdateInputInputObject
      UserUpdateOneWithoutProjectsInput: UserUpdateOneWithoutProjectsInputInputObject
      UserUpdateWithoutProjectsDataInput: UserUpdateWithoutProjectsDataInputInputObject
      UserUpsertWithoutProjectsInput: UserUpsertWithoutProjectsInputInputObject
      ProjectUpdateManyMutationInput: ProjectUpdateManyMutationInputInputObject
      FeedbackTargetCreateInput: FeedbackTargetCreateInputInputObject
      ProjectCreateOneInput: ProjectCreateOneInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      FeedbackTargetUpdateInput: FeedbackTargetUpdateInputInputObject
      ProjectUpdateOneRequiredInput: ProjectUpdateOneRequiredInputInputObject
      ProjectUpdateDataInput: ProjectUpdateDataInputInputObject
      ProjectUpsertNestedInput: ProjectUpsertNestedInputInputObject
      UserUpdateOneInput: UserUpdateOneInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      FeedbackTargetUpdateManyMutationInput: FeedbackTargetUpdateManyMutationInputInputObject
      DepartmentCreateInput: DepartmentCreateInputInputObject
      ProjectCreateManyWithoutDepartmentsInput: ProjectCreateManyWithoutDepartmentsInputInputObject
      ProjectCreateWithoutDepartmentsInput: ProjectCreateWithoutDepartmentsInputInputObject
      DepartmentUpdateInput: DepartmentUpdateInputInputObject
      ProjectUpdateManyWithoutDepartmentsInput: ProjectUpdateManyWithoutDepartmentsInputInputObject
      ProjectUpdateWithWhereUniqueWithoutDepartmentsInput: ProjectUpdateWithWhereUniqueWithoutDepartmentsInputInputObject
      ProjectUpdateWithoutDepartmentsDataInput: ProjectUpdateWithoutDepartmentsDataInputInputObject
      ProjectUpsertWithWhereUniqueWithoutDepartmentsInput: ProjectUpsertWithWhereUniqueWithoutDepartmentsInputInputObject
      DepartmentUpdateManyMutationInput: DepartmentUpdateManyMutationInputInputObject
      MediaCreateInput: MediaCreateInputInputObject
      FeedbackTargetCreateOneInput: FeedbackTargetCreateOneInputInputObject
      MediaUpdateInput: MediaUpdateInputInputObject
      FeedbackTargetUpdateOneRequiredInput: FeedbackTargetUpdateOneRequiredInputInputObject
      FeedbackTargetUpdateDataInput: FeedbackTargetUpdateDataInputInputObject
      FeedbackTargetUpsertNestedInput: FeedbackTargetUpsertNestedInputInputObject
      MediaUpdateManyMutationInput: MediaUpdateManyMutationInputInputObject
      FeedbackRoundCreateInput: FeedbackRoundCreateInputInputObject
      UserCreateManyWithoutFeedbackRoundsInput: UserCreateManyWithoutFeedbackRoundsInputInputObject
      UserCreateWithoutFeedbackRoundsInput: UserCreateWithoutFeedbackRoundsInputInputObject
      FeedbackRoundUpdateInput: FeedbackRoundUpdateInputInputObject
      UserUpdateManyWithoutFeedbackRoundsInput: UserUpdateManyWithoutFeedbackRoundsInputInputObject
      UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput: UserUpdateWithWhereUniqueWithoutFeedbackRoundsInputInputObject
      UserUpdateWithoutFeedbackRoundsDataInput: UserUpdateWithoutFeedbackRoundsDataInputInputObject
      UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput: UserUpsertWithWhereUniqueWithoutFeedbackRoundsInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      FeedbackRoundUpdateManyMutationInput: FeedbackRoundUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ScriptSubscriptionWhereInput: ScriptSubscriptionWhereInputInputObject
      ProjectSubscriptionWhereInput: ProjectSubscriptionWhereInputInputObject
      FeedbackTargetSubscriptionWhereInput: FeedbackTargetSubscriptionWhereInputInputObject
      DepartmentSubscriptionWhereInput: DepartmentSubscriptionWhereInputInputObject
      MediaSubscriptionWhereInput: MediaSubscriptionWhereInputInputObject
      FeedbackRoundSubscriptionWhereInput: FeedbackRoundSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ProjectOrderByInput: ProjectOrderByInputValues,
    DepartmentOrderByInput: DepartmentOrderByInputValues,
    FeedbackRoundOrderByInput: FeedbackRoundOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    ScriptOrderByInput: ScriptOrderByInputValues,
    FeedbackTargetOrderByInput: FeedbackTargetOrderByInputValues,
    MediaOrderByInput: MediaOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'script', args?: QueryScriptArgs[] | false, alias?: string  } 
  | { name: 'scripts', args?: QueryScriptsArgs[] | false, alias?: string  } 
  | { name: 'scriptsConnection', args?: QueryScriptsConnectionArgs[] | false, alias?: string  } 
  | { name: 'project', args?: QueryProjectArgs[] | false, alias?: string  } 
  | { name: 'projects', args?: QueryProjectsArgs[] | false, alias?: string  } 
  | { name: 'projectsConnection', args?: QueryProjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'feedbackTarget', args?: QueryFeedbackTargetArgs[] | false, alias?: string  } 
  | { name: 'feedbackTargets', args?: QueryFeedbackTargetsArgs[] | false, alias?: string  } 
  | { name: 'feedbackTargetsConnection', args?: QueryFeedbackTargetsConnectionArgs[] | false, alias?: string  } 
  | { name: 'department', args?: QueryDepartmentArgs[] | false, alias?: string  } 
  | { name: 'departments', args?: QueryDepartmentsArgs[] | false, alias?: string  } 
  | { name: 'departmentsConnection', args?: QueryDepartmentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'media', args?: QueryMediaArgs[] | false, alias?: string  } 
  | { name: 'medias', args?: QueryMediasArgs[] | false, alias?: string  } 
  | { name: 'mediasConnection', args?: QueryMediasConnectionArgs[] | false, alias?: string  } 
  | { name: 'feedbackRound', args?: QueryFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'feedbackRounds', args?: QueryFeedbackRoundsArgs[] | false, alias?: string  } 
  | { name: 'feedbackRoundsConnection', args?: QueryFeedbackRoundsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'script'
  | 'scripts'
  | 'scriptsConnection'
  | 'project'
  | 'projects'
  | 'projectsConnection'
  | 'feedbackTarget'
  | 'feedbackTargets'
  | 'feedbackTargetsConnection'
  | 'department'
  | 'departments'
  | 'departmentsConnection'
  | 'media'
  | 'medias'
  | 'mediasConnection'
  | 'feedbackRound'
  | 'feedbackRounds'
  | 'feedbackRoundsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryScriptArgs =
  | 'where'
type QueryScriptsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryScriptsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectArgs =
  | 'where'
type QueryProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackTargetArgs =
  | 'where'
type QueryFeedbackTargetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackTargetsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDepartmentArgs =
  | 'where'
type QueryDepartmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDepartmentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMediaArgs =
  | 'where'
type QueryMediasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMediasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackRoundArgs =
  | 'where'
type QueryFeedbackRoundsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackRoundsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  script: {
    type: 'Script'
    args: Record<QueryScriptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ScriptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Script | null> | prisma.Script | null
  }
  scripts: {
    type: 'Script'
    args: Record<QueryScriptsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ScriptWhereInput | null, orderBy?: prisma.ScriptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Script[]> | prisma.Script[]
  }
  scriptsConnection: {
    type: 'ScriptConnection'
    args: Record<QueryScriptsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ScriptWhereInput | null, orderBy?: prisma.ScriptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ScriptConnection> | prisma.ScriptConnection
  }
  project: {
    type: 'Project'
    args: Record<QueryProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  projects: {
    type: 'Project'
    args: Record<QueryProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  projectsConnection: {
    type: 'ProjectConnection'
    args: Record<QueryProjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectConnection> | prisma.ProjectConnection
  }
  feedbackTarget: {
    type: 'FeedbackTarget'
    args: Record<QueryFeedbackTargetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FeedbackTargetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget | null> | prisma.FeedbackTarget | null
  }
  feedbackTargets: {
    type: 'FeedbackTarget'
    args: Record<QueryFeedbackTargetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackTargetWhereInput | null, orderBy?: prisma.FeedbackTargetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget[]> | prisma.FeedbackTarget[]
  }
  feedbackTargetsConnection: {
    type: 'FeedbackTargetConnection'
    args: Record<QueryFeedbackTargetsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackTargetWhereInput | null, orderBy?: prisma.FeedbackTargetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTargetConnection> | prisma.FeedbackTargetConnection
  }
  department: {
    type: 'Department'
    args: Record<QueryDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DepartmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  departments: {
    type: 'Department'
    args: Record<QueryDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DepartmentWhereInput | null, orderBy?: prisma.DepartmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department[]> | prisma.Department[]
  }
  departmentsConnection: {
    type: 'DepartmentConnection'
    args: Record<QueryDepartmentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DepartmentWhereInput | null, orderBy?: prisma.DepartmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentConnection> | prisma.DepartmentConnection
  }
  media: {
    type: 'Media'
    args: Record<QueryMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  medias: {
    type: 'Media'
    args: Record<QueryMediasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MediaWhereInput | null, orderBy?: prisma.MediaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media[]> | prisma.Media[]
  }
  mediasConnection: {
    type: 'MediaConnection'
    args: Record<QueryMediasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MediaWhereInput | null, orderBy?: prisma.MediaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaConnection> | prisma.MediaConnection
  }
  feedbackRound: {
    type: 'FeedbackRound'
    args: Record<QueryFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FeedbackRoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  feedbackRounds: {
    type: 'FeedbackRound'
    args: Record<QueryFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackRoundWhereInput | null, orderBy?: prisma.FeedbackRoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound[]> | prisma.FeedbackRound[]
  }
  feedbackRoundsConnection: {
    type: 'FeedbackRoundConnection'
    args: Record<QueryFeedbackRoundsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackRoundWhereInput | null, orderBy?: prisma.FeedbackRoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundConnection> | prisma.FeedbackRoundConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'projects', args?: UserProjectsArgs[] | false, alias?: string  } 
  | { name: 'feedbackRounds', args?: UserFeedbackRoundsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'email'
  | 'password'
  | 'createdAt'
  | 'updatedAt'
  | 'projects'
  | 'feedbackRounds'


type UserProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserFeedbackRoundsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  projects: {
    type: 'Project'
    args: Record<UserProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  feedbackRounds: {
    type: 'FeedbackRound'
    args: Record<UserFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: FeedbackRoundWhereInput | null, orderBy?: prisma.FeedbackRoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound[]> | prisma.FeedbackRound[]
  }
}
  

// Types for Project

type ProjectObject =
  | ProjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 
  | { name: 'departments', args?: ProjectDepartmentsArgs[] | false, alias?: string  } 

type ProjectFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'
  | 'createdBy'
  | 'departments'


type ProjectDepartmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  departments: {
    type: 'Department'
    args: Record<ProjectDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: DepartmentWhereInput | null, orderBy?: prisma.DepartmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department[]> | prisma.Department[]
  }
}
  

// Types for Department

type DepartmentObject =
  | DepartmentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'projects', args?: DepartmentProjectsArgs[] | false, alias?: string  } 

type DepartmentFields =
  | 'id'
  | 'name'
  | 'projects'


type DepartmentProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface DepartmentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  projects: {
    type: 'Project'
    args: Record<DepartmentProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Department">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
}
  

// Types for FeedbackRound

type FeedbackRoundObject =
  | FeedbackRoundFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'roundEnd', args?: [] | false, alias?: string  } 
  | { name: 'users', args?: FeedbackRoundUsersArgs[] | false, alias?: string  } 

type FeedbackRoundFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'roundEnd'
  | 'users'


type FeedbackRoundUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface FeedbackRoundFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  roundEnd: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  users: {
    type: 'User'
    args: Record<FeedbackRoundUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRound">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Script

type ScriptObject =
  | ScriptFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type ScriptFields =
  | 'id'



  

export interface ScriptFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ScriptConnection

type ScriptConnectionObject =
  | ScriptConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ScriptConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ScriptConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ScriptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ScriptEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ScriptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ScriptEdge[]> | prisma.ScriptEdge[]
  }
  aggregate: {
    type: 'AggregateScript'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ScriptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateScript> | prisma.AggregateScript
  }
}
  

// Types for ScriptEdge

type ScriptEdgeObject =
  | ScriptEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ScriptEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ScriptEdgeFieldDetails {
  node: {
    type: 'Script'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ScriptEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Script> | prisma.Script
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateScript

type AggregateScriptObject =
  | AggregateScriptFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateScriptFields =
  | 'count'



  

export interface AggregateScriptFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectConnection

type ProjectConnectionObject =
  | ProjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectEdge[]> | prisma.ProjectEdge[]
  }
  aggregate: {
    type: 'AggregateProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProject> | prisma.AggregateProject
  }
}
  

// Types for ProjectEdge

type ProjectEdgeObject =
  | ProjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectEdgeFieldDetails {
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProject

type AggregateProjectObject =
  | AggregateProjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectFields =
  | 'count'



  

export interface AggregateProjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackTarget

type FeedbackTargetObject =
  | FeedbackTargetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 

type FeedbackTargetFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'
  | 'project'
  | 'createdBy'



  

export interface FeedbackTargetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  project: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackTarget">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackTarget">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for FeedbackTargetConnection

type FeedbackTargetConnectionObject =
  | FeedbackTargetConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FeedbackTargetConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FeedbackTargetConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackTargetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FeedbackTargetEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackTargetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTargetEdge[]> | prisma.FeedbackTargetEdge[]
  }
  aggregate: {
    type: 'AggregateFeedbackTarget'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackTargetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFeedbackTarget> | prisma.AggregateFeedbackTarget
  }
}
  

// Types for FeedbackTargetEdge

type FeedbackTargetEdgeObject =
  | FeedbackTargetEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FeedbackTargetEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FeedbackTargetEdgeFieldDetails {
  node: {
    type: 'FeedbackTarget'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackTargetEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget> | prisma.FeedbackTarget
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFeedbackTarget

type AggregateFeedbackTargetObject =
  | AggregateFeedbackTargetFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFeedbackTargetFields =
  | 'count'



  

export interface AggregateFeedbackTargetFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DepartmentConnection

type DepartmentConnectionObject =
  | DepartmentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DepartmentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DepartmentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DepartmentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentEdge[]> | prisma.DepartmentEdge[]
  }
  aggregate: {
    type: 'AggregateDepartment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDepartment> | prisma.AggregateDepartment
  }
}
  

// Types for DepartmentEdge

type DepartmentEdgeObject =
  | DepartmentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DepartmentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DepartmentEdgeFieldDetails {
  node: {
    type: 'Department'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department> | prisma.Department
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDepartment

type AggregateDepartmentObject =
  | AggregateDepartmentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDepartmentFields =
  | 'count'



  

export interface AggregateDepartmentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Media

type MediaObject =
  | MediaFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'target', args?: [] | false, alias?: string  } 

type MediaFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'
  | 'target'



  

export interface MediaFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  target: {
    type: 'FeedbackTarget'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Media">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget> | prisma.FeedbackTarget
  }
}
  

// Types for MediaConnection

type MediaConnectionObject =
  | MediaConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MediaConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MediaConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MediaEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaEdge[]> | prisma.MediaEdge[]
  }
  aggregate: {
    type: 'AggregateMedia'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMedia> | prisma.AggregateMedia
  }
}
  

// Types for MediaEdge

type MediaEdgeObject =
  | MediaEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MediaEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MediaEdgeFieldDetails {
  node: {
    type: 'Media'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media> | prisma.Media
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMedia

type AggregateMediaObject =
  | AggregateMediaFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMediaFields =
  | 'count'



  

export interface AggregateMediaFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackRoundConnection

type FeedbackRoundConnectionObject =
  | FeedbackRoundConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FeedbackRoundConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FeedbackRoundConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FeedbackRoundEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundEdge[]> | prisma.FeedbackRoundEdge[]
  }
  aggregate: {
    type: 'AggregateFeedbackRound'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFeedbackRound> | prisma.AggregateFeedbackRound
  }
}
  

// Types for FeedbackRoundEdge

type FeedbackRoundEdgeObject =
  | FeedbackRoundEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FeedbackRoundEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FeedbackRoundEdgeFieldDetails {
  node: {
    type: 'FeedbackRound'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound> | prisma.FeedbackRound
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFeedbackRound

type AggregateFeedbackRoundObject =
  | AggregateFeedbackRoundFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFeedbackRoundFields =
  | 'count'



  

export interface AggregateFeedbackRoundFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createScript', args?: MutationCreateScriptArgs[] | false, alias?: string  } 
  | { name: 'deleteScript', args?: MutationDeleteScriptArgs[] | false, alias?: string  } 
  | { name: 'deleteManyScripts', args?: MutationDeleteManyScriptsArgs[] | false, alias?: string  } 
  | { name: 'createProject', args?: MutationCreateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateProject', args?: MutationUpdateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjects', args?: MutationUpdateManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertProject', args?: MutationUpsertProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteProject', args?: MutationDeleteProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjects', args?: MutationDeleteManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'createFeedbackTarget', args?: MutationCreateFeedbackTargetArgs[] | false, alias?: string  } 
  | { name: 'updateFeedbackTarget', args?: MutationUpdateFeedbackTargetArgs[] | false, alias?: string  } 
  | { name: 'updateManyFeedbackTargets', args?: MutationUpdateManyFeedbackTargetsArgs[] | false, alias?: string  } 
  | { name: 'upsertFeedbackTarget', args?: MutationUpsertFeedbackTargetArgs[] | false, alias?: string  } 
  | { name: 'deleteFeedbackTarget', args?: MutationDeleteFeedbackTargetArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFeedbackTargets', args?: MutationDeleteManyFeedbackTargetsArgs[] | false, alias?: string  } 
  | { name: 'createDepartment', args?: MutationCreateDepartmentArgs[] | false, alias?: string  } 
  | { name: 'updateDepartment', args?: MutationUpdateDepartmentArgs[] | false, alias?: string  } 
  | { name: 'updateManyDepartments', args?: MutationUpdateManyDepartmentsArgs[] | false, alias?: string  } 
  | { name: 'upsertDepartment', args?: MutationUpsertDepartmentArgs[] | false, alias?: string  } 
  | { name: 'deleteDepartment', args?: MutationDeleteDepartmentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDepartments', args?: MutationDeleteManyDepartmentsArgs[] | false, alias?: string  } 
  | { name: 'createMedia', args?: MutationCreateMediaArgs[] | false, alias?: string  } 
  | { name: 'updateMedia', args?: MutationUpdateMediaArgs[] | false, alias?: string  } 
  | { name: 'updateManyMedias', args?: MutationUpdateManyMediasArgs[] | false, alias?: string  } 
  | { name: 'upsertMedia', args?: MutationUpsertMediaArgs[] | false, alias?: string  } 
  | { name: 'deleteMedia', args?: MutationDeleteMediaArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMedias', args?: MutationDeleteManyMediasArgs[] | false, alias?: string  } 
  | { name: 'createFeedbackRound', args?: MutationCreateFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'updateFeedbackRound', args?: MutationUpdateFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'updateManyFeedbackRounds', args?: MutationUpdateManyFeedbackRoundsArgs[] | false, alias?: string  } 
  | { name: 'upsertFeedbackRound', args?: MutationUpsertFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'deleteFeedbackRound', args?: MutationDeleteFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFeedbackRounds', args?: MutationDeleteManyFeedbackRoundsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createScript'
  | 'deleteScript'
  | 'deleteManyScripts'
  | 'createProject'
  | 'updateProject'
  | 'updateManyProjects'
  | 'upsertProject'
  | 'deleteProject'
  | 'deleteManyProjects'
  | 'createFeedbackTarget'
  | 'updateFeedbackTarget'
  | 'updateManyFeedbackTargets'
  | 'upsertFeedbackTarget'
  | 'deleteFeedbackTarget'
  | 'deleteManyFeedbackTargets'
  | 'createDepartment'
  | 'updateDepartment'
  | 'updateManyDepartments'
  | 'upsertDepartment'
  | 'deleteDepartment'
  | 'deleteManyDepartments'
  | 'createMedia'
  | 'updateMedia'
  | 'updateManyMedias'
  | 'upsertMedia'
  | 'deleteMedia'
  | 'deleteManyMedias'
  | 'createFeedbackRound'
  | 'updateFeedbackRound'
  | 'updateManyFeedbackRounds'
  | 'upsertFeedbackRound'
  | 'deleteFeedbackRound'
  | 'deleteManyFeedbackRounds'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateScriptArgs =
  | 'data'
type MutationDeleteScriptArgs =
  | 'where'
type MutationDeleteManyScriptsArgs =
  | 'where'
type MutationCreateProjectArgs =
  | 'data'
type MutationUpdateProjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectArgs =
  | 'where'
type MutationDeleteManyProjectsArgs =
  | 'where'
type MutationCreateFeedbackTargetArgs =
  | 'data'
type MutationUpdateFeedbackTargetArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFeedbackTargetsArgs =
  | 'data'
  | 'where'
type MutationUpsertFeedbackTargetArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFeedbackTargetArgs =
  | 'where'
type MutationDeleteManyFeedbackTargetsArgs =
  | 'where'
type MutationCreateDepartmentArgs =
  | 'data'
type MutationUpdateDepartmentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDepartmentsArgs =
  | 'data'
  | 'where'
type MutationUpsertDepartmentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDepartmentArgs =
  | 'where'
type MutationDeleteManyDepartmentsArgs =
  | 'where'
type MutationCreateMediaArgs =
  | 'data'
type MutationUpdateMediaArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMediasArgs =
  | 'data'
  | 'where'
type MutationUpsertMediaArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMediaArgs =
  | 'where'
type MutationDeleteManyMediasArgs =
  | 'where'
type MutationCreateFeedbackRoundArgs =
  | 'data'
type MutationUpdateFeedbackRoundArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFeedbackRoundsArgs =
  | 'data'
  | 'where'
type MutationUpsertFeedbackRoundArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFeedbackRoundArgs =
  | 'where'
type MutationDeleteManyFeedbackRoundsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createScript: {
    type: 'Script'
    args: Record<MutationCreateScriptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ScriptCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Script> | prisma.Script
  }
  deleteScript: {
    type: 'Script'
    args: Record<MutationDeleteScriptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ScriptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Script | null> | prisma.Script | null
  }
  deleteManyScripts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyScriptsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ScriptWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProject: {
    type: 'Project'
    args: Record<MutationCreateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  updateProject: {
    type: 'Project'
    args: Record<MutationUpdateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateInput, where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updateManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateManyMutationInput, where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProject: {
    type: 'Project'
    args: Record<MutationUpsertProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput, create: ProjectCreateInput, update: ProjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  deleteProject: {
    type: 'Project'
    args: Record<MutationDeleteProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  deleteManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFeedbackTarget: {
    type: 'FeedbackTarget'
    args: Record<MutationCreateFeedbackTargetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackTargetCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget> | prisma.FeedbackTarget
  }
  updateFeedbackTarget: {
    type: 'FeedbackTarget'
    args: Record<MutationUpdateFeedbackTargetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackTargetUpdateInput, where: FeedbackTargetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget | null> | prisma.FeedbackTarget | null
  }
  updateManyFeedbackTargets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFeedbackTargetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackTargetUpdateManyMutationInput, where?: FeedbackTargetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFeedbackTarget: {
    type: 'FeedbackTarget'
    args: Record<MutationUpsertFeedbackTargetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackTargetWhereUniqueInput, create: FeedbackTargetCreateInput, update: FeedbackTargetUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget> | prisma.FeedbackTarget
  }
  deleteFeedbackTarget: {
    type: 'FeedbackTarget'
    args: Record<MutationDeleteFeedbackTargetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackTargetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget | null> | prisma.FeedbackTarget | null
  }
  deleteManyFeedbackTargets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFeedbackTargetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FeedbackTargetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDepartment: {
    type: 'Department'
    args: Record<MutationCreateDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DepartmentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department> | prisma.Department
  }
  updateDepartment: {
    type: 'Department'
    args: Record<MutationUpdateDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DepartmentUpdateInput, where: DepartmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  updateManyDepartments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DepartmentUpdateManyMutationInput, where?: DepartmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDepartment: {
    type: 'Department'
    args: Record<MutationUpsertDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DepartmentWhereUniqueInput, create: DepartmentCreateInput, update: DepartmentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department> | prisma.Department
  }
  deleteDepartment: {
    type: 'Department'
    args: Record<MutationDeleteDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DepartmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  deleteManyDepartments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DepartmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMedia: {
    type: 'Media'
    args: Record<MutationCreateMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media> | prisma.Media
  }
  updateMedia: {
    type: 'Media'
    args: Record<MutationUpdateMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaUpdateInput, where: MediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  updateManyMedias: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMediasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaUpdateManyMutationInput, where?: MediaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMedia: {
    type: 'Media'
    args: Record<MutationUpsertMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MediaWhereUniqueInput, create: MediaCreateInput, update: MediaUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media> | prisma.Media
  }
  deleteMedia: {
    type: 'Media'
    args: Record<MutationDeleteMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  deleteManyMedias: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMediasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MediaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationCreateFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackRoundCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound> | prisma.FeedbackRound
  }
  updateFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationUpdateFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackRoundUpdateInput, where: FeedbackRoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  updateManyFeedbackRounds: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackRoundUpdateManyMutationInput, where?: FeedbackRoundWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationUpsertFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackRoundWhereUniqueInput, create: FeedbackRoundCreateInput, update: FeedbackRoundUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound> | prisma.FeedbackRound
  }
  deleteFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationDeleteFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackRoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  deleteManyFeedbackRounds: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FeedbackRoundWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'script', args?: SubscriptionScriptArgs[] | false, alias?: string  } 
  | { name: 'project', args?: SubscriptionProjectArgs[] | false, alias?: string  } 
  | { name: 'feedbackTarget', args?: SubscriptionFeedbackTargetArgs[] | false, alias?: string  } 
  | { name: 'department', args?: SubscriptionDepartmentArgs[] | false, alias?: string  } 
  | { name: 'media', args?: SubscriptionMediaArgs[] | false, alias?: string  } 
  | { name: 'feedbackRound', args?: SubscriptionFeedbackRoundArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'script'
  | 'project'
  | 'feedbackTarget'
  | 'department'
  | 'media'
  | 'feedbackRound'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionScriptArgs =
  | 'where'
type SubscriptionProjectArgs =
  | 'where'
type SubscriptionFeedbackTargetArgs =
  | 'where'
type SubscriptionDepartmentArgs =
  | 'where'
type SubscriptionMediaArgs =
  | 'where'
type SubscriptionFeedbackRoundArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  script: {
    type: 'ScriptSubscriptionPayload'
    args: Record<SubscriptionScriptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ScriptSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ScriptSubscriptionPayload | null> | prisma.ScriptSubscriptionPayload | null
  }
  project: {
    type: 'ProjectSubscriptionPayload'
    args: Record<SubscriptionProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectSubscriptionPayload | null> | prisma.ProjectSubscriptionPayload | null
  }
  feedbackTarget: {
    type: 'FeedbackTargetSubscriptionPayload'
    args: Record<SubscriptionFeedbackTargetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FeedbackTargetSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTargetSubscriptionPayload | null> | prisma.FeedbackTargetSubscriptionPayload | null
  }
  department: {
    type: 'DepartmentSubscriptionPayload'
    args: Record<SubscriptionDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DepartmentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentSubscriptionPayload | null> | prisma.DepartmentSubscriptionPayload | null
  }
  media: {
    type: 'MediaSubscriptionPayload'
    args: Record<SubscriptionMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MediaSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaSubscriptionPayload | null> | prisma.MediaSubscriptionPayload | null
  }
  feedbackRound: {
    type: 'FeedbackRoundSubscriptionPayload'
    args: Record<SubscriptionFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FeedbackRoundSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundSubscriptionPayload | null> | prisma.FeedbackRoundSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'password'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ScriptSubscriptionPayload

type ScriptSubscriptionPayloadObject =
  | ScriptSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ScriptSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ScriptSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ScriptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Script'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ScriptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Script | null> | prisma.Script | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ScriptPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ScriptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ScriptPreviousValues | null> | prisma.ScriptPreviousValues | null
  }
}
  

// Types for ScriptPreviousValues

type ScriptPreviousValuesObject =
  | ScriptPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type ScriptPreviousValuesFields =
  | 'id'



  

export interface ScriptPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectSubscriptionPayload

type ProjectSubscriptionPayloadObject =
  | ProjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectPreviousValues | null> | prisma.ProjectPreviousValues | null
  }
}
  

// Types for ProjectPreviousValues

type ProjectPreviousValuesObject =
  | ProjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackTargetSubscriptionPayload

type FeedbackTargetSubscriptionPayloadObject =
  | FeedbackTargetSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FeedbackTargetSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FeedbackTargetSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackTargetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FeedbackTarget'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackTargetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTarget | null> | prisma.FeedbackTarget | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FeedbackTargetPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackTargetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackTargetPreviousValues | null> | prisma.FeedbackTargetPreviousValues | null
  }
}
  

// Types for FeedbackTargetPreviousValues

type FeedbackTargetPreviousValuesObject =
  | FeedbackTargetPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FeedbackTargetPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface FeedbackTargetPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DepartmentSubscriptionPayload

type DepartmentSubscriptionPayloadObject =
  | DepartmentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DepartmentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DepartmentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Department'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DepartmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DepartmentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DepartmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentPreviousValues | null> | prisma.DepartmentPreviousValues | null
  }
}
  

// Types for DepartmentPreviousValues

type DepartmentPreviousValuesObject =
  | DepartmentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type DepartmentPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface DepartmentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MediaSubscriptionPayload

type MediaSubscriptionPayloadObject =
  | MediaSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MediaSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MediaSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Media'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MediaPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaPreviousValues | null> | prisma.MediaPreviousValues | null
  }
}
  

// Types for MediaPreviousValues

type MediaPreviousValuesObject =
  | MediaPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type MediaPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface MediaPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackRoundSubscriptionPayload

type FeedbackRoundSubscriptionPayloadObject =
  | FeedbackRoundSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FeedbackRoundSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FeedbackRoundSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FeedbackRound'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackRoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FeedbackRoundPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackRoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundPreviousValues | null> | prisma.FeedbackRoundPreviousValues | null
  }
}
  

// Types for FeedbackRoundPreviousValues

type FeedbackRoundPreviousValuesObject =
  | FeedbackRoundPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'roundEnd', args?: [] | false, alias?: string  } 

type FeedbackRoundPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'roundEnd'



  

export interface FeedbackRoundPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  roundEnd: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface ProjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdBy?: UserWhereInput | null
  departments_every?: DepartmentWhereInput | null
  departments_some?: DepartmentWhereInput | null
  departments_none?: DepartmentWhereInput | null
  AND?: ProjectWhereInput[]
  OR?: ProjectWhereInput[]
  NOT?: ProjectWhereInput[]
}
export type ProjectWhereInputInputObject =
  | Extract<keyof ProjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'departments_every', alias?: string  } 
  | { name: 'departments_some', alias?: string  } 
  | { name: 'departments_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  projects_every?: ProjectWhereInput | null
  projects_some?: ProjectWhereInput | null
  projects_none?: ProjectWhereInput | null
  feedbackRounds_every?: FeedbackRoundWhereInput | null
  feedbackRounds_some?: FeedbackRoundWhereInput | null
  feedbackRounds_none?: FeedbackRoundWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'projects_every', alias?: string  } 
  | { name: 'projects_some', alias?: string  } 
  | { name: 'projects_none', alias?: string  } 
  | { name: 'feedbackRounds_every', alias?: string  } 
  | { name: 'feedbackRounds_some', alias?: string  } 
  | { name: 'feedbackRounds_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  roundEnd?: string | null
  roundEnd_not?: string | null
  roundEnd_in?: string[]
  roundEnd_not_in?: string[]
  roundEnd_lt?: string | null
  roundEnd_lte?: string | null
  roundEnd_gt?: string | null
  roundEnd_gte?: string | null
  users_every?: UserWhereInput | null
  users_some?: UserWhereInput | null
  users_none?: UserWhereInput | null
  AND?: FeedbackRoundWhereInput[]
  OR?: FeedbackRoundWhereInput[]
  NOT?: FeedbackRoundWhereInput[]
}
export type FeedbackRoundWhereInputInputObject =
  | Extract<keyof FeedbackRoundWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'roundEnd_not', alias?: string  } 
  | { name: 'roundEnd_in', alias?: string  } 
  | { name: 'roundEnd_not_in', alias?: string  } 
  | { name: 'roundEnd_lt', alias?: string  } 
  | { name: 'roundEnd_lte', alias?: string  } 
  | { name: 'roundEnd_gt', alias?: string  } 
  | { name: 'roundEnd_gte', alias?: string  } 
  | { name: 'users_every', alias?: string  } 
  | { name: 'users_some', alias?: string  } 
  | { name: 'users_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DepartmentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  projects_every?: ProjectWhereInput | null
  projects_some?: ProjectWhereInput | null
  projects_none?: ProjectWhereInput | null
  AND?: DepartmentWhereInput[]
  OR?: DepartmentWhereInput[]
  NOT?: DepartmentWhereInput[]
}
export type DepartmentWhereInputInputObject =
  | Extract<keyof DepartmentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'projects_every', alias?: string  } 
  | { name: 'projects_some', alias?: string  } 
  | { name: 'projects_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ScriptWhereUniqueInput {
  id?: string | null
}
export type ScriptWhereUniqueInputInputObject =
  | Extract<keyof ScriptWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ScriptWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  AND?: ScriptWhereInput[]
  OR?: ScriptWhereInput[]
  NOT?: ScriptWhereInput[]
}
export type ScriptWhereInputInputObject =
  | Extract<keyof ScriptWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectWhereUniqueInput {
  id?: string | null
}
export type ProjectWhereUniqueInputInputObject =
  | Extract<keyof ProjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FeedbackTargetWhereUniqueInput {
  id?: string | null
}
export type FeedbackTargetWhereUniqueInputInputObject =
  | Extract<keyof FeedbackTargetWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FeedbackTargetWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  project?: ProjectWhereInput | null
  createdBy?: UserWhereInput | null
  AND?: FeedbackTargetWhereInput[]
  OR?: FeedbackTargetWhereInput[]
  NOT?: FeedbackTargetWhereInput[]
}
export type FeedbackTargetWhereInputInputObject =
  | Extract<keyof FeedbackTargetWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DepartmentWhereUniqueInput {
  id?: string | null
}
export type DepartmentWhereUniqueInputInputObject =
  | Extract<keyof DepartmentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MediaWhereUniqueInput {
  id?: string | null
}
export type MediaWhereUniqueInputInputObject =
  | Extract<keyof MediaWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MediaWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  target?: FeedbackTargetWhereInput | null
  AND?: MediaWhereInput[]
  OR?: MediaWhereInput[]
  NOT?: MediaWhereInput[]
}
export type MediaWhereInputInputObject =
  | Extract<keyof MediaWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'target', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundWhereUniqueInput {
  id?: string | null
}
export type FeedbackRoundWhereUniqueInputInputObject =
  | Extract<keyof FeedbackRoundWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string | null
  email?: string
  password?: string
  projects?: ProjectCreateManyWithoutCreatedByInput | null
  feedbackRounds?: FeedbackRoundCreateManyWithoutUsersInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface ProjectCreateManyWithoutCreatedByInput {
  create?: ProjectCreateWithoutCreatedByInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutCreatedByInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutCreatedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutCreatedByInput {
  id?: string | null
  name?: string
  departments?: DepartmentCreateManyWithoutProjectsInput | null
}
export type ProjectCreateWithoutCreatedByInputInputObject =
  | Extract<keyof ProjectCreateWithoutCreatedByInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface DepartmentCreateManyWithoutProjectsInput {
  create?: DepartmentCreateWithoutProjectsInput[]
  connect?: DepartmentWhereUniqueInput[]
}
export type DepartmentCreateManyWithoutProjectsInputInputObject =
  | Extract<keyof DepartmentCreateManyWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DepartmentCreateWithoutProjectsInput {
  id?: string | null
  name?: string
}
export type DepartmentCreateWithoutProjectsInputInputObject =
  | Extract<keyof DepartmentCreateWithoutProjectsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface FeedbackRoundCreateManyWithoutUsersInput {
  create?: FeedbackRoundCreateWithoutUsersInput[]
  connect?: FeedbackRoundWhereUniqueInput[]
}
export type FeedbackRoundCreateManyWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundCreateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackRoundCreateWithoutUsersInput {
  id?: string | null
  roundEnd?: string | null
}
export type FeedbackRoundCreateWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundCreateWithoutUsersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  password?: string | null
  projects?: ProjectUpdateManyWithoutCreatedByInput | null
  feedbackRounds?: FeedbackRoundUpdateManyWithoutUsersInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface ProjectUpdateManyWithoutCreatedByInput {
  create?: ProjectCreateWithoutCreatedByInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutCreatedByInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutCreatedByInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutCreatedByInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutCreatedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutCreatedByInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutCreatedByDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutCreatedByInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutCreatedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutCreatedByDataInput {
  name?: string | null
  departments?: DepartmentUpdateManyWithoutProjectsInput | null
}
export type ProjectUpdateWithoutCreatedByDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutCreatedByDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface DepartmentUpdateManyWithoutProjectsInput {
  create?: DepartmentCreateWithoutProjectsInput[]
  delete?: DepartmentWhereUniqueInput[]
  connect?: DepartmentWhereUniqueInput[]
  set?: DepartmentWhereUniqueInput[]
  disconnect?: DepartmentWhereUniqueInput[]
  update?: DepartmentUpdateWithWhereUniqueWithoutProjectsInput[]
  upsert?: DepartmentUpsertWithWhereUniqueWithoutProjectsInput[]
  deleteMany?: DepartmentScalarWhereInput[]
  updateMany?: DepartmentUpdateManyWithWhereNestedInput[]
}
export type DepartmentUpdateManyWithoutProjectsInputInputObject =
  | Extract<keyof DepartmentUpdateManyWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DepartmentUpdateWithWhereUniqueWithoutProjectsInput {
  where?: DepartmentWhereUniqueInput
  data?: DepartmentUpdateWithoutProjectsDataInput
}
export type DepartmentUpdateWithWhereUniqueWithoutProjectsInputInputObject =
  | Extract<keyof DepartmentUpdateWithWhereUniqueWithoutProjectsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DepartmentUpdateWithoutProjectsDataInput {
  name?: string | null
}
export type DepartmentUpdateWithoutProjectsDataInputInputObject =
  | Extract<keyof DepartmentUpdateWithoutProjectsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface DepartmentUpsertWithWhereUniqueWithoutProjectsInput {
  where?: DepartmentWhereUniqueInput
  update?: DepartmentUpdateWithoutProjectsDataInput
  create?: DepartmentCreateWithoutProjectsInput
}
export type DepartmentUpsertWithWhereUniqueWithoutProjectsInputInputObject =
  | Extract<keyof DepartmentUpsertWithWhereUniqueWithoutProjectsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DepartmentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: DepartmentScalarWhereInput[]
  OR?: DepartmentScalarWhereInput[]
  NOT?: DepartmentScalarWhereInput[]
}
export type DepartmentScalarWhereInputInputObject =
  | Extract<keyof DepartmentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DepartmentUpdateManyWithWhereNestedInput {
  where?: DepartmentScalarWhereInput
  data?: DepartmentUpdateManyDataInput
}
export type DepartmentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DepartmentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DepartmentUpdateManyDataInput {
  name?: string | null
}
export type DepartmentUpdateManyDataInputInputObject =
  | Extract<keyof DepartmentUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutCreatedByInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutCreatedByDataInput
  create?: ProjectCreateWithoutCreatedByInput
}
export type ProjectUpsertWithWhereUniqueWithoutCreatedByInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutCreatedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProjectScalarWhereInput[]
  OR?: ProjectScalarWhereInput[]
  NOT?: ProjectScalarWhereInput[]
}
export type ProjectScalarWhereInputInputObject =
  | Extract<keyof ProjectScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectUpdateManyWithWhereNestedInput {
  where?: ProjectScalarWhereInput
  data?: ProjectUpdateManyDataInput
}
export type ProjectUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateManyDataInput {
  name?: string | null
}
export type ProjectUpdateManyDataInputInputObject =
  | Extract<keyof ProjectUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackRoundUpdateManyWithoutUsersInput {
  create?: FeedbackRoundCreateWithoutUsersInput[]
  delete?: FeedbackRoundWhereUniqueInput[]
  connect?: FeedbackRoundWhereUniqueInput[]
  set?: FeedbackRoundWhereUniqueInput[]
  disconnect?: FeedbackRoundWhereUniqueInput[]
  update?: FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput[]
  upsert?: FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput[]
  deleteMany?: FeedbackRoundScalarWhereInput[]
  updateMany?: FeedbackRoundUpdateManyWithWhereNestedInput[]
}
export type FeedbackRoundUpdateManyWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput {
  where?: FeedbackRoundWhereUniqueInput
  data?: FeedbackRoundUpdateWithoutUsersDataInput
}
export type FeedbackRoundUpdateWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FeedbackRoundUpdateWithoutUsersDataInput {
  roundEnd?: string | null
}
export type FeedbackRoundUpdateWithoutUsersDataInputInputObject =
  | Extract<keyof FeedbackRoundUpdateWithoutUsersDataInput, string>
  | { name: 'roundEnd', alias?: string  } 
  
export interface FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput {
  where?: FeedbackRoundWhereUniqueInput
  update?: FeedbackRoundUpdateWithoutUsersDataInput
  create?: FeedbackRoundCreateWithoutUsersInput
}
export type FeedbackRoundUpsertWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FeedbackRoundScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  roundEnd?: string | null
  roundEnd_not?: string | null
  roundEnd_in?: string[]
  roundEnd_not_in?: string[]
  roundEnd_lt?: string | null
  roundEnd_lte?: string | null
  roundEnd_gt?: string | null
  roundEnd_gte?: string | null
  AND?: FeedbackRoundScalarWhereInput[]
  OR?: FeedbackRoundScalarWhereInput[]
  NOT?: FeedbackRoundScalarWhereInput[]
}
export type FeedbackRoundScalarWhereInputInputObject =
  | Extract<keyof FeedbackRoundScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'roundEnd_not', alias?: string  } 
  | { name: 'roundEnd_in', alias?: string  } 
  | { name: 'roundEnd_not_in', alias?: string  } 
  | { name: 'roundEnd_lt', alias?: string  } 
  | { name: 'roundEnd_lte', alias?: string  } 
  | { name: 'roundEnd_gt', alias?: string  } 
  | { name: 'roundEnd_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundUpdateManyWithWhereNestedInput {
  where?: FeedbackRoundScalarWhereInput
  data?: FeedbackRoundUpdateManyDataInput
}
export type FeedbackRoundUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FeedbackRoundUpdateManyDataInput {
  roundEnd?: string | null
}
export type FeedbackRoundUpdateManyDataInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyDataInput, string>
  | { name: 'roundEnd', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface ScriptCreateInput {
  id?: string | null
}
export type ScriptCreateInputInputObject =
  | Extract<keyof ScriptCreateInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectCreateInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneWithoutProjectsInput | null
  departments?: DepartmentCreateManyWithoutProjectsInput | null
}
export type ProjectCreateInputInputObject =
  | Extract<keyof ProjectCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface UserCreateOneWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutProjectsInputInputObject =
  | Extract<keyof UserCreateOneWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutProjectsInput {
  id?: string | null
  name?: string | null
  email?: string
  password?: string
  feedbackRounds?: FeedbackRoundCreateManyWithoutUsersInput | null
}
export type UserCreateWithoutProjectsInputInputObject =
  | Extract<keyof UserCreateWithoutProjectsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface ProjectUpdateInput {
  name?: string | null
  createdBy?: UserUpdateOneWithoutProjectsInput | null
  departments?: DepartmentUpdateManyWithoutProjectsInput | null
}
export type ProjectUpdateInputInputObject =
  | Extract<keyof ProjectUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface UserUpdateOneWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput | null
  update?: UserUpdateWithoutProjectsDataInput | null
  upsert?: UserUpsertWithoutProjectsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutProjectsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutProjectsDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  feedbackRounds?: FeedbackRoundUpdateManyWithoutUsersInput | null
}
export type UserUpdateWithoutProjectsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutProjectsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface UserUpsertWithoutProjectsInput {
  update?: UserUpdateWithoutProjectsDataInput
  create?: UserCreateWithoutProjectsInput
}
export type UserUpsertWithoutProjectsInputInputObject =
  | Extract<keyof UserUpsertWithoutProjectsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectUpdateManyMutationInput {
  name?: string | null
}
export type ProjectUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackTargetCreateInput {
  id?: string | null
  name?: string
  project?: ProjectCreateOneInput
  createdBy?: UserCreateOneInput | null
}
export type FeedbackTargetCreateInputInputObject =
  | Extract<keyof FeedbackTargetCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ProjectCreateOneInput {
  create?: ProjectCreateInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectCreateOneInputInputObject =
  | Extract<keyof ProjectCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackTargetUpdateInput {
  name?: string | null
  project?: ProjectUpdateOneRequiredInput | null
  createdBy?: UserUpdateOneInput | null
}
export type FeedbackTargetUpdateInputInputObject =
  | Extract<keyof FeedbackTargetUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ProjectUpdateOneRequiredInput {
  create?: ProjectCreateInput | null
  update?: ProjectUpdateDataInput | null
  upsert?: ProjectUpsertNestedInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectUpdateOneRequiredInputInputObject =
  | Extract<keyof ProjectUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectUpdateDataInput {
  name?: string | null
  createdBy?: UserUpdateOneWithoutProjectsInput | null
  departments?: DepartmentUpdateManyWithoutProjectsInput | null
}
export type ProjectUpdateDataInputInputObject =
  | Extract<keyof ProjectUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface ProjectUpsertNestedInput {
  update?: ProjectUpdateDataInput
  create?: ProjectCreateInput
}
export type ProjectUpsertNestedInputInputObject =
  | Extract<keyof ProjectUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateOneInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneInputInputObject =
  | Extract<keyof UserUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  projects?: ProjectUpdateManyWithoutCreatedByInput | null
  feedbackRounds?: FeedbackRoundUpdateManyWithoutUsersInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FeedbackTargetUpdateManyMutationInput {
  name?: string | null
}
export type FeedbackTargetUpdateManyMutationInputInputObject =
  | Extract<keyof FeedbackTargetUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface DepartmentCreateInput {
  id?: string | null
  name?: string
  projects?: ProjectCreateManyWithoutDepartmentsInput | null
}
export type DepartmentCreateInputInputObject =
  | Extract<keyof DepartmentCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectCreateManyWithoutDepartmentsInput {
  create?: ProjectCreateWithoutDepartmentsInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutDepartmentsInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutDepartmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutDepartmentsInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneWithoutProjectsInput | null
}
export type ProjectCreateWithoutDepartmentsInputInputObject =
  | Extract<keyof ProjectCreateWithoutDepartmentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface DepartmentUpdateInput {
  name?: string | null
  projects?: ProjectUpdateManyWithoutDepartmentsInput | null
}
export type DepartmentUpdateInputInputObject =
  | Extract<keyof DepartmentUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectUpdateManyWithoutDepartmentsInput {
  create?: ProjectCreateWithoutDepartmentsInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutDepartmentsInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutDepartmentsInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutDepartmentsInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutDepartmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutDepartmentsInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutDepartmentsDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutDepartmentsInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutDepartmentsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutDepartmentsDataInput {
  name?: string | null
  createdBy?: UserUpdateOneWithoutProjectsInput | null
}
export type ProjectUpdateWithoutDepartmentsDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutDepartmentsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutDepartmentsInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutDepartmentsDataInput
  create?: ProjectCreateWithoutDepartmentsInput
}
export type ProjectUpsertWithWhereUniqueWithoutDepartmentsInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutDepartmentsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DepartmentUpdateManyMutationInput {
  name?: string | null
}
export type DepartmentUpdateManyMutationInputInputObject =
  | Extract<keyof DepartmentUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface MediaCreateInput {
  id?: string | null
  name?: string
  target?: FeedbackTargetCreateOneInput
}
export type MediaCreateInputInputObject =
  | Extract<keyof MediaCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'target', alias?: string  } 
  
export interface FeedbackTargetCreateOneInput {
  create?: FeedbackTargetCreateInput | null
  connect?: FeedbackTargetWhereUniqueInput | null
}
export type FeedbackTargetCreateOneInputInputObject =
  | Extract<keyof FeedbackTargetCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MediaUpdateInput {
  name?: string | null
  target?: FeedbackTargetUpdateOneRequiredInput | null
}
export type MediaUpdateInputInputObject =
  | Extract<keyof MediaUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'target', alias?: string  } 
  
export interface FeedbackTargetUpdateOneRequiredInput {
  create?: FeedbackTargetCreateInput | null
  update?: FeedbackTargetUpdateDataInput | null
  upsert?: FeedbackTargetUpsertNestedInput | null
  connect?: FeedbackTargetWhereUniqueInput | null
}
export type FeedbackTargetUpdateOneRequiredInputInputObject =
  | Extract<keyof FeedbackTargetUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackTargetUpdateDataInput {
  name?: string | null
  project?: ProjectUpdateOneRequiredInput | null
  createdBy?: UserUpdateOneInput | null
}
export type FeedbackTargetUpdateDataInputInputObject =
  | Extract<keyof FeedbackTargetUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface FeedbackTargetUpsertNestedInput {
  update?: FeedbackTargetUpdateDataInput
  create?: FeedbackTargetCreateInput
}
export type FeedbackTargetUpsertNestedInputInputObject =
  | Extract<keyof FeedbackTargetUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MediaUpdateManyMutationInput {
  name?: string | null
}
export type MediaUpdateManyMutationInputInputObject =
  | Extract<keyof MediaUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackRoundCreateInput {
  id?: string | null
  roundEnd?: string | null
  users?: UserCreateManyWithoutFeedbackRoundsInput | null
}
export type FeedbackRoundCreateInputInputObject =
  | Extract<keyof FeedbackRoundCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserCreateManyWithoutFeedbackRoundsInput {
  create?: UserCreateWithoutFeedbackRoundsInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserCreateManyWithoutFeedbackRoundsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutFeedbackRoundsInput {
  id?: string | null
  name?: string | null
  email?: string
  password?: string
  projects?: ProjectCreateManyWithoutCreatedByInput | null
}
export type UserCreateWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserCreateWithoutFeedbackRoundsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface FeedbackRoundUpdateInput {
  roundEnd?: string | null
  users?: UserUpdateManyWithoutFeedbackRoundsInput | null
}
export type FeedbackRoundUpdateInputInputObject =
  | Extract<keyof FeedbackRoundUpdateInput, string>
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserUpdateManyWithoutFeedbackRoundsInput {
  create?: UserCreateWithoutFeedbackRoundsInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserUpdateManyWithoutFeedbackRoundsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutFeedbackRoundsDataInput
}
export type UserUpdateWithWhereUniqueWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutFeedbackRoundsDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  projects?: ProjectUpdateManyWithoutCreatedByInput | null
}
export type UserUpdateWithoutFeedbackRoundsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutFeedbackRoundsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutFeedbackRoundsDataInput
  create?: UserCreateWithoutFeedbackRoundsInput
}
export type UserUpsertWithWhereUniqueWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface FeedbackRoundUpdateManyMutationInput {
  roundEnd?: string | null
}
export type FeedbackRoundUpdateManyMutationInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyMutationInput, string>
  | { name: 'roundEnd', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ScriptSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ScriptWhereInput | null
  AND?: ScriptSubscriptionWhereInput[]
  OR?: ScriptSubscriptionWhereInput[]
  NOT?: ScriptSubscriptionWhereInput[]
}
export type ScriptSubscriptionWhereInputInputObject =
  | Extract<keyof ScriptSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectWhereInput | null
  AND?: ProjectSubscriptionWhereInput[]
  OR?: ProjectSubscriptionWhereInput[]
  NOT?: ProjectSubscriptionWhereInput[]
}
export type ProjectSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackTargetSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FeedbackTargetWhereInput | null
  AND?: FeedbackTargetSubscriptionWhereInput[]
  OR?: FeedbackTargetSubscriptionWhereInput[]
  NOT?: FeedbackTargetSubscriptionWhereInput[]
}
export type FeedbackTargetSubscriptionWhereInputInputObject =
  | Extract<keyof FeedbackTargetSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DepartmentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DepartmentWhereInput | null
  AND?: DepartmentSubscriptionWhereInput[]
  OR?: DepartmentSubscriptionWhereInput[]
  NOT?: DepartmentSubscriptionWhereInput[]
}
export type DepartmentSubscriptionWhereInputInputObject =
  | Extract<keyof DepartmentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MediaSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MediaWhereInput | null
  AND?: MediaSubscriptionWhereInput[]
  OR?: MediaSubscriptionWhereInput[]
  NOT?: MediaSubscriptionWhereInput[]
}
export type MediaSubscriptionWhereInputInputObject =
  | Extract<keyof MediaSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FeedbackRoundWhereInput | null
  AND?: FeedbackRoundSubscriptionWhereInput[]
  OR?: FeedbackRoundSubscriptionWhereInput[]
  NOT?: FeedbackRoundSubscriptionWhereInput[]
}
export type FeedbackRoundSubscriptionWhereInputInputObject =
  | Extract<keyof FeedbackRoundSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ProjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type DepartmentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FeedbackRoundOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'roundEnd_ASC'
  | 'roundEnd_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ScriptOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FeedbackTargetOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MediaOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  