/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      FeedbackProject: FeedbackProjectObject
      FeedbackRound: FeedbackRoundObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      FeedbackProjectConnection: FeedbackProjectConnectionObject
      FeedbackProjectEdge: FeedbackProjectEdgeObject
      AggregateFeedbackProject: AggregateFeedbackProjectObject
      FeedbackSubject: FeedbackSubjectObject
      FeedbackSubjectConnection: FeedbackSubjectConnectionObject
      FeedbackSubjectEdge: FeedbackSubjectEdgeObject
      AggregateFeedbackSubject: AggregateFeedbackSubjectObject
      FeedbackMedia: FeedbackMediaObject
      FeedbackMediaConnection: FeedbackMediaConnectionObject
      FeedbackMediaEdge: FeedbackMediaEdgeObject
      AggregateFeedbackMedia: AggregateFeedbackMediaObject
      FeedbackRoundConnection: FeedbackRoundConnectionObject
      FeedbackRoundEdge: FeedbackRoundEdgeObject
      AggregateFeedbackRound: AggregateFeedbackRoundObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      FeedbackProjectSubscriptionPayload: FeedbackProjectSubscriptionPayloadObject
      FeedbackProjectPreviousValues: FeedbackProjectPreviousValuesObject
      FeedbackSubjectSubscriptionPayload: FeedbackSubjectSubscriptionPayloadObject
      FeedbackSubjectPreviousValues: FeedbackSubjectPreviousValuesObject
      FeedbackMediaSubscriptionPayload: FeedbackMediaSubscriptionPayloadObject
      FeedbackMediaPreviousValues: FeedbackMediaPreviousValuesObject
      FeedbackRoundSubscriptionPayload: FeedbackRoundSubscriptionPayloadObject
      FeedbackRoundPreviousValues: FeedbackRoundPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      FeedbackProject: FeedbackProjectFieldDetails
      FeedbackRound: FeedbackRoundFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      FeedbackProjectConnection: FeedbackProjectConnectionFieldDetails
      FeedbackProjectEdge: FeedbackProjectEdgeFieldDetails
      AggregateFeedbackProject: AggregateFeedbackProjectFieldDetails
      FeedbackSubject: FeedbackSubjectFieldDetails
      FeedbackSubjectConnection: FeedbackSubjectConnectionFieldDetails
      FeedbackSubjectEdge: FeedbackSubjectEdgeFieldDetails
      AggregateFeedbackSubject: AggregateFeedbackSubjectFieldDetails
      FeedbackMedia: FeedbackMediaFieldDetails
      FeedbackMediaConnection: FeedbackMediaConnectionFieldDetails
      FeedbackMediaEdge: FeedbackMediaEdgeFieldDetails
      AggregateFeedbackMedia: AggregateFeedbackMediaFieldDetails
      FeedbackRoundConnection: FeedbackRoundConnectionFieldDetails
      FeedbackRoundEdge: FeedbackRoundEdgeFieldDetails
      AggregateFeedbackRound: AggregateFeedbackRoundFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      FeedbackProjectSubscriptionPayload: FeedbackProjectSubscriptionPayloadFieldDetails
      FeedbackProjectPreviousValues: FeedbackProjectPreviousValuesFieldDetails
      FeedbackSubjectSubscriptionPayload: FeedbackSubjectSubscriptionPayloadFieldDetails
      FeedbackSubjectPreviousValues: FeedbackSubjectPreviousValuesFieldDetails
      FeedbackMediaSubscriptionPayload: FeedbackMediaSubscriptionPayloadFieldDetails
      FeedbackMediaPreviousValues: FeedbackMediaPreviousValuesFieldDetails
      FeedbackRoundSubscriptionPayload: FeedbackRoundSubscriptionPayloadFieldDetails
      FeedbackRoundPreviousValues: FeedbackRoundPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      FeedbackProjectWhereInput: FeedbackProjectWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      FeedbackRoundWhereInput: FeedbackRoundWhereInputInputObject
      FeedbackProjectWhereUniqueInput: FeedbackProjectWhereUniqueInputInputObject
      FeedbackSubjectWhereUniqueInput: FeedbackSubjectWhereUniqueInputInputObject
      FeedbackSubjectWhereInput: FeedbackSubjectWhereInputInputObject
      FeedbackMediaWhereUniqueInput: FeedbackMediaWhereUniqueInputInputObject
      FeedbackMediaWhereInput: FeedbackMediaWhereInputInputObject
      FeedbackRoundWhereUniqueInput: FeedbackRoundWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      FeedbackProjectCreateManyWithoutCreatedByInput: FeedbackProjectCreateManyWithoutCreatedByInputInputObject
      FeedbackProjectCreateWithoutCreatedByInput: FeedbackProjectCreateWithoutCreatedByInputInputObject
      FeedbackRoundCreateManyWithoutUsersInput: FeedbackRoundCreateManyWithoutUsersInputInputObject
      FeedbackRoundCreateWithoutUsersInput: FeedbackRoundCreateWithoutUsersInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      FeedbackProjectUpdateManyWithoutCreatedByInput: FeedbackProjectUpdateManyWithoutCreatedByInputInputObject
      FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInput: FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInputInputObject
      FeedbackProjectUpdateWithoutCreatedByDataInput: FeedbackProjectUpdateWithoutCreatedByDataInputInputObject
      FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInput: FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInputInputObject
      FeedbackProjectScalarWhereInput: FeedbackProjectScalarWhereInputInputObject
      FeedbackProjectUpdateManyWithWhereNestedInput: FeedbackProjectUpdateManyWithWhereNestedInputInputObject
      FeedbackProjectUpdateManyDataInput: FeedbackProjectUpdateManyDataInputInputObject
      FeedbackRoundUpdateManyWithoutUsersInput: FeedbackRoundUpdateManyWithoutUsersInputInputObject
      FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput: FeedbackRoundUpdateWithWhereUniqueWithoutUsersInputInputObject
      FeedbackRoundUpdateWithoutUsersDataInput: FeedbackRoundUpdateWithoutUsersDataInputInputObject
      FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput: FeedbackRoundUpsertWithWhereUniqueWithoutUsersInputInputObject
      FeedbackRoundScalarWhereInput: FeedbackRoundScalarWhereInputInputObject
      FeedbackRoundUpdateManyWithWhereNestedInput: FeedbackRoundUpdateManyWithWhereNestedInputInputObject
      FeedbackRoundUpdateManyDataInput: FeedbackRoundUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      FeedbackProjectCreateInput: FeedbackProjectCreateInputInputObject
      UserCreateOneWithoutFeedbackProjectsInput: UserCreateOneWithoutFeedbackProjectsInputInputObject
      UserCreateWithoutFeedbackProjectsInput: UserCreateWithoutFeedbackProjectsInputInputObject
      FeedbackProjectUpdateInput: FeedbackProjectUpdateInputInputObject
      UserUpdateOneWithoutFeedbackProjectsInput: UserUpdateOneWithoutFeedbackProjectsInputInputObject
      UserUpdateWithoutFeedbackProjectsDataInput: UserUpdateWithoutFeedbackProjectsDataInputInputObject
      UserUpsertWithoutFeedbackProjectsInput: UserUpsertWithoutFeedbackProjectsInputInputObject
      FeedbackProjectUpdateManyMutationInput: FeedbackProjectUpdateManyMutationInputInputObject
      FeedbackSubjectCreateInput: FeedbackSubjectCreateInputInputObject
      FeedbackProjectCreateOneInput: FeedbackProjectCreateOneInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      FeedbackSubjectUpdateInput: FeedbackSubjectUpdateInputInputObject
      FeedbackProjectUpdateOneRequiredInput: FeedbackProjectUpdateOneRequiredInputInputObject
      FeedbackProjectUpdateDataInput: FeedbackProjectUpdateDataInputInputObject
      FeedbackProjectUpsertNestedInput: FeedbackProjectUpsertNestedInputInputObject
      UserUpdateOneInput: UserUpdateOneInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      FeedbackSubjectUpdateManyMutationInput: FeedbackSubjectUpdateManyMutationInputInputObject
      FeedbackMediaCreateInput: FeedbackMediaCreateInputInputObject
      FeedbackMediaUpdateInput: FeedbackMediaUpdateInputInputObject
      FeedbackMediaUpdateManyMutationInput: FeedbackMediaUpdateManyMutationInputInputObject
      FeedbackRoundCreateInput: FeedbackRoundCreateInputInputObject
      UserCreateManyWithoutFeedbackRoundsInput: UserCreateManyWithoutFeedbackRoundsInputInputObject
      UserCreateWithoutFeedbackRoundsInput: UserCreateWithoutFeedbackRoundsInputInputObject
      FeedbackRoundUpdateInput: FeedbackRoundUpdateInputInputObject
      UserUpdateManyWithoutFeedbackRoundsInput: UserUpdateManyWithoutFeedbackRoundsInputInputObject
      UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput: UserUpdateWithWhereUniqueWithoutFeedbackRoundsInputInputObject
      UserUpdateWithoutFeedbackRoundsDataInput: UserUpdateWithoutFeedbackRoundsDataInputInputObject
      UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput: UserUpsertWithWhereUniqueWithoutFeedbackRoundsInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      FeedbackRoundUpdateManyMutationInput: FeedbackRoundUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      FeedbackProjectSubscriptionWhereInput: FeedbackProjectSubscriptionWhereInputInputObject
      FeedbackSubjectSubscriptionWhereInput: FeedbackSubjectSubscriptionWhereInputInputObject
      FeedbackMediaSubscriptionWhereInput: FeedbackMediaSubscriptionWhereInputInputObject
      FeedbackRoundSubscriptionWhereInput: FeedbackRoundSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    FeedbackProjectOrderByInput: FeedbackProjectOrderByInputValues,
    FeedbackRoundOrderByInput: FeedbackRoundOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    FeedbackSubjectOrderByInput: FeedbackSubjectOrderByInputValues,
    FeedbackMediaOrderByInput: FeedbackMediaOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'feedbackProject', args?: QueryFeedbackProjectArgs[] | false, alias?: string  } 
  | { name: 'feedbackProjects', args?: QueryFeedbackProjectsArgs[] | false, alias?: string  } 
  | { name: 'feedbackProjectsConnection', args?: QueryFeedbackProjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'feedbackSubject', args?: QueryFeedbackSubjectArgs[] | false, alias?: string  } 
  | { name: 'feedbackSubjects', args?: QueryFeedbackSubjectsArgs[] | false, alias?: string  } 
  | { name: 'feedbackSubjectsConnection', args?: QueryFeedbackSubjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'feedbackMedia', args?: QueryFeedbackMediaArgs[] | false, alias?: string  } 
  | { name: 'feedbackMedias', args?: QueryFeedbackMediasArgs[] | false, alias?: string  } 
  | { name: 'feedbackMediasConnection', args?: QueryFeedbackMediasConnectionArgs[] | false, alias?: string  } 
  | { name: 'feedbackRound', args?: QueryFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'feedbackRounds', args?: QueryFeedbackRoundsArgs[] | false, alias?: string  } 
  | { name: 'feedbackRoundsConnection', args?: QueryFeedbackRoundsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'feedbackProject'
  | 'feedbackProjects'
  | 'feedbackProjectsConnection'
  | 'feedbackSubject'
  | 'feedbackSubjects'
  | 'feedbackSubjectsConnection'
  | 'feedbackMedia'
  | 'feedbackMedias'
  | 'feedbackMediasConnection'
  | 'feedbackRound'
  | 'feedbackRounds'
  | 'feedbackRoundsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackProjectArgs =
  | 'where'
type QueryFeedbackProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackProjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackSubjectArgs =
  | 'where'
type QueryFeedbackSubjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackSubjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackMediaArgs =
  | 'where'
type QueryFeedbackMediasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackMediasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackRoundArgs =
  | 'where'
type QueryFeedbackRoundsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackRoundsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  feedbackProject: {
    type: 'FeedbackProject'
    args: Record<QueryFeedbackProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FeedbackProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject | null> | prisma.FeedbackProject | null
  }
  feedbackProjects: {
    type: 'FeedbackProject'
    args: Record<QueryFeedbackProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackProjectWhereInput | null, orderBy?: prisma.FeedbackProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject[]> | prisma.FeedbackProject[]
  }
  feedbackProjectsConnection: {
    type: 'FeedbackProjectConnection'
    args: Record<QueryFeedbackProjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackProjectWhereInput | null, orderBy?: prisma.FeedbackProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProjectConnection> | prisma.FeedbackProjectConnection
  }
  feedbackSubject: {
    type: 'FeedbackSubject'
    args: Record<QueryFeedbackSubjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FeedbackSubjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject | null> | prisma.FeedbackSubject | null
  }
  feedbackSubjects: {
    type: 'FeedbackSubject'
    args: Record<QueryFeedbackSubjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackSubjectWhereInput | null, orderBy?: prisma.FeedbackSubjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject[]> | prisma.FeedbackSubject[]
  }
  feedbackSubjectsConnection: {
    type: 'FeedbackSubjectConnection'
    args: Record<QueryFeedbackSubjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackSubjectWhereInput | null, orderBy?: prisma.FeedbackSubjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubjectConnection> | prisma.FeedbackSubjectConnection
  }
  feedbackMedia: {
    type: 'FeedbackMedia'
    args: Record<QueryFeedbackMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FeedbackMediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia | null> | prisma.FeedbackMedia | null
  }
  feedbackMedias: {
    type: 'FeedbackMedia'
    args: Record<QueryFeedbackMediasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackMediaWhereInput | null, orderBy?: prisma.FeedbackMediaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia[]> | prisma.FeedbackMedia[]
  }
  feedbackMediasConnection: {
    type: 'FeedbackMediaConnection'
    args: Record<QueryFeedbackMediasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackMediaWhereInput | null, orderBy?: prisma.FeedbackMediaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMediaConnection> | prisma.FeedbackMediaConnection
  }
  feedbackRound: {
    type: 'FeedbackRound'
    args: Record<QueryFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FeedbackRoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  feedbackRounds: {
    type: 'FeedbackRound'
    args: Record<QueryFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackRoundWhereInput | null, orderBy?: prisma.FeedbackRoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound[]> | prisma.FeedbackRound[]
  }
  feedbackRoundsConnection: {
    type: 'FeedbackRoundConnection'
    args: Record<QueryFeedbackRoundsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackRoundWhereInput | null, orderBy?: prisma.FeedbackRoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundConnection> | prisma.FeedbackRoundConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'feedbackProjects', args?: UserFeedbackProjectsArgs[] | false, alias?: string  } 
  | { name: 'feedbackRounds', args?: UserFeedbackRoundsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'email'
  | 'createdAt'
  | 'updatedAt'
  | 'feedbackProjects'
  | 'feedbackRounds'


type UserFeedbackProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserFeedbackRoundsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  feedbackProjects: {
    type: 'FeedbackProject'
    args: Record<UserFeedbackProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: FeedbackProjectWhereInput | null, orderBy?: prisma.FeedbackProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject[]> | prisma.FeedbackProject[]
  }
  feedbackRounds: {
    type: 'FeedbackRound'
    args: Record<UserFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: FeedbackRoundWhereInput | null, orderBy?: prisma.FeedbackRoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound[]> | prisma.FeedbackRound[]
  }
}
  

// Types for FeedbackProject

type FeedbackProjectObject =
  | FeedbackProjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 

type FeedbackProjectFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'
  | 'createdBy'



  

export interface FeedbackProjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackProject">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for FeedbackRound

type FeedbackRoundObject =
  | FeedbackRoundFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'roundEnd', args?: [] | false, alias?: string  } 
  | { name: 'users', args?: FeedbackRoundUsersArgs[] | false, alias?: string  } 

type FeedbackRoundFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'roundEnd'
  | 'users'


type FeedbackRoundUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface FeedbackRoundFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  roundEnd: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  users: {
    type: 'User'
    args: Record<FeedbackRoundUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRound">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackProjectConnection

type FeedbackProjectConnectionObject =
  | FeedbackProjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FeedbackProjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FeedbackProjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FeedbackProjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProjectEdge[]> | prisma.FeedbackProjectEdge[]
  }
  aggregate: {
    type: 'AggregateFeedbackProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFeedbackProject> | prisma.AggregateFeedbackProject
  }
}
  

// Types for FeedbackProjectEdge

type FeedbackProjectEdgeObject =
  | FeedbackProjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FeedbackProjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FeedbackProjectEdgeFieldDetails {
  node: {
    type: 'FeedbackProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackProjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject> | prisma.FeedbackProject
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFeedbackProject

type AggregateFeedbackProjectObject =
  | AggregateFeedbackProjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFeedbackProjectFields =
  | 'count'



  

export interface AggregateFeedbackProjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackSubject

type FeedbackSubjectObject =
  | FeedbackSubjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 

type FeedbackSubjectFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'
  | 'project'
  | 'createdBy'



  

export interface FeedbackSubjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  project: {
    type: 'FeedbackProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackSubject">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject> | prisma.FeedbackProject
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackSubject">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for FeedbackSubjectConnection

type FeedbackSubjectConnectionObject =
  | FeedbackSubjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FeedbackSubjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FeedbackSubjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackSubjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FeedbackSubjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackSubjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubjectEdge[]> | prisma.FeedbackSubjectEdge[]
  }
  aggregate: {
    type: 'AggregateFeedbackSubject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackSubjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFeedbackSubject> | prisma.AggregateFeedbackSubject
  }
}
  

// Types for FeedbackSubjectEdge

type FeedbackSubjectEdgeObject =
  | FeedbackSubjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FeedbackSubjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FeedbackSubjectEdgeFieldDetails {
  node: {
    type: 'FeedbackSubject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackSubjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject> | prisma.FeedbackSubject
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFeedbackSubject

type AggregateFeedbackSubjectObject =
  | AggregateFeedbackSubjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFeedbackSubjectFields =
  | 'count'



  

export interface AggregateFeedbackSubjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackMedia

type FeedbackMediaObject =
  | FeedbackMediaFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'subject', args?: [] | false, alias?: string  } 

type FeedbackMediaFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'
  | 'subject'



  

export interface FeedbackMediaFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subject: {
    type: 'FeedbackProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackMedia">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject> | prisma.FeedbackProject
  }
}
  

// Types for FeedbackMediaConnection

type FeedbackMediaConnectionObject =
  | FeedbackMediaConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FeedbackMediaConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FeedbackMediaConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackMediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FeedbackMediaEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackMediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMediaEdge[]> | prisma.FeedbackMediaEdge[]
  }
  aggregate: {
    type: 'AggregateFeedbackMedia'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackMediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFeedbackMedia> | prisma.AggregateFeedbackMedia
  }
}
  

// Types for FeedbackMediaEdge

type FeedbackMediaEdgeObject =
  | FeedbackMediaEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FeedbackMediaEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FeedbackMediaEdgeFieldDetails {
  node: {
    type: 'FeedbackMedia'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackMediaEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia> | prisma.FeedbackMedia
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFeedbackMedia

type AggregateFeedbackMediaObject =
  | AggregateFeedbackMediaFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFeedbackMediaFields =
  | 'count'



  

export interface AggregateFeedbackMediaFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackRoundConnection

type FeedbackRoundConnectionObject =
  | FeedbackRoundConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FeedbackRoundConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FeedbackRoundConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FeedbackRoundEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundEdge[]> | prisma.FeedbackRoundEdge[]
  }
  aggregate: {
    type: 'AggregateFeedbackRound'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFeedbackRound> | prisma.AggregateFeedbackRound
  }
}
  

// Types for FeedbackRoundEdge

type FeedbackRoundEdgeObject =
  | FeedbackRoundEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FeedbackRoundEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FeedbackRoundEdgeFieldDetails {
  node: {
    type: 'FeedbackRound'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound> | prisma.FeedbackRound
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFeedbackRound

type AggregateFeedbackRoundObject =
  | AggregateFeedbackRoundFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFeedbackRoundFields =
  | 'count'



  

export interface AggregateFeedbackRoundFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createFeedbackProject', args?: MutationCreateFeedbackProjectArgs[] | false, alias?: string  } 
  | { name: 'updateFeedbackProject', args?: MutationUpdateFeedbackProjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyFeedbackProjects', args?: MutationUpdateManyFeedbackProjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertFeedbackProject', args?: MutationUpsertFeedbackProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteFeedbackProject', args?: MutationDeleteFeedbackProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFeedbackProjects', args?: MutationDeleteManyFeedbackProjectsArgs[] | false, alias?: string  } 
  | { name: 'createFeedbackSubject', args?: MutationCreateFeedbackSubjectArgs[] | false, alias?: string  } 
  | { name: 'updateFeedbackSubject', args?: MutationUpdateFeedbackSubjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyFeedbackSubjects', args?: MutationUpdateManyFeedbackSubjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertFeedbackSubject', args?: MutationUpsertFeedbackSubjectArgs[] | false, alias?: string  } 
  | { name: 'deleteFeedbackSubject', args?: MutationDeleteFeedbackSubjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFeedbackSubjects', args?: MutationDeleteManyFeedbackSubjectsArgs[] | false, alias?: string  } 
  | { name: 'createFeedbackMedia', args?: MutationCreateFeedbackMediaArgs[] | false, alias?: string  } 
  | { name: 'updateFeedbackMedia', args?: MutationUpdateFeedbackMediaArgs[] | false, alias?: string  } 
  | { name: 'updateManyFeedbackMedias', args?: MutationUpdateManyFeedbackMediasArgs[] | false, alias?: string  } 
  | { name: 'upsertFeedbackMedia', args?: MutationUpsertFeedbackMediaArgs[] | false, alias?: string  } 
  | { name: 'deleteFeedbackMedia', args?: MutationDeleteFeedbackMediaArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFeedbackMedias', args?: MutationDeleteManyFeedbackMediasArgs[] | false, alias?: string  } 
  | { name: 'createFeedbackRound', args?: MutationCreateFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'updateFeedbackRound', args?: MutationUpdateFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'updateManyFeedbackRounds', args?: MutationUpdateManyFeedbackRoundsArgs[] | false, alias?: string  } 
  | { name: 'upsertFeedbackRound', args?: MutationUpsertFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'deleteFeedbackRound', args?: MutationDeleteFeedbackRoundArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFeedbackRounds', args?: MutationDeleteManyFeedbackRoundsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createFeedbackProject'
  | 'updateFeedbackProject'
  | 'updateManyFeedbackProjects'
  | 'upsertFeedbackProject'
  | 'deleteFeedbackProject'
  | 'deleteManyFeedbackProjects'
  | 'createFeedbackSubject'
  | 'updateFeedbackSubject'
  | 'updateManyFeedbackSubjects'
  | 'upsertFeedbackSubject'
  | 'deleteFeedbackSubject'
  | 'deleteManyFeedbackSubjects'
  | 'createFeedbackMedia'
  | 'updateFeedbackMedia'
  | 'updateManyFeedbackMedias'
  | 'upsertFeedbackMedia'
  | 'deleteFeedbackMedia'
  | 'deleteManyFeedbackMedias'
  | 'createFeedbackRound'
  | 'updateFeedbackRound'
  | 'updateManyFeedbackRounds'
  | 'upsertFeedbackRound'
  | 'deleteFeedbackRound'
  | 'deleteManyFeedbackRounds'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateFeedbackProjectArgs =
  | 'data'
type MutationUpdateFeedbackProjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFeedbackProjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertFeedbackProjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFeedbackProjectArgs =
  | 'where'
type MutationDeleteManyFeedbackProjectsArgs =
  | 'where'
type MutationCreateFeedbackSubjectArgs =
  | 'data'
type MutationUpdateFeedbackSubjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFeedbackSubjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertFeedbackSubjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFeedbackSubjectArgs =
  | 'where'
type MutationDeleteManyFeedbackSubjectsArgs =
  | 'where'
type MutationCreateFeedbackMediaArgs =
  | 'data'
type MutationUpdateFeedbackMediaArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFeedbackMediasArgs =
  | 'data'
  | 'where'
type MutationUpsertFeedbackMediaArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFeedbackMediaArgs =
  | 'where'
type MutationDeleteManyFeedbackMediasArgs =
  | 'where'
type MutationCreateFeedbackRoundArgs =
  | 'data'
type MutationUpdateFeedbackRoundArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFeedbackRoundsArgs =
  | 'data'
  | 'where'
type MutationUpsertFeedbackRoundArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFeedbackRoundArgs =
  | 'where'
type MutationDeleteManyFeedbackRoundsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFeedbackProject: {
    type: 'FeedbackProject'
    args: Record<MutationCreateFeedbackProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackProjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject> | prisma.FeedbackProject
  }
  updateFeedbackProject: {
    type: 'FeedbackProject'
    args: Record<MutationUpdateFeedbackProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackProjectUpdateInput, where: FeedbackProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject | null> | prisma.FeedbackProject | null
  }
  updateManyFeedbackProjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFeedbackProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackProjectUpdateManyMutationInput, where?: FeedbackProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFeedbackProject: {
    type: 'FeedbackProject'
    args: Record<MutationUpsertFeedbackProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackProjectWhereUniqueInput, create: FeedbackProjectCreateInput, update: FeedbackProjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject> | prisma.FeedbackProject
  }
  deleteFeedbackProject: {
    type: 'FeedbackProject'
    args: Record<MutationDeleteFeedbackProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject | null> | prisma.FeedbackProject | null
  }
  deleteManyFeedbackProjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFeedbackProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FeedbackProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFeedbackSubject: {
    type: 'FeedbackSubject'
    args: Record<MutationCreateFeedbackSubjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackSubjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject> | prisma.FeedbackSubject
  }
  updateFeedbackSubject: {
    type: 'FeedbackSubject'
    args: Record<MutationUpdateFeedbackSubjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackSubjectUpdateInput, where: FeedbackSubjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject | null> | prisma.FeedbackSubject | null
  }
  updateManyFeedbackSubjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFeedbackSubjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackSubjectUpdateManyMutationInput, where?: FeedbackSubjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFeedbackSubject: {
    type: 'FeedbackSubject'
    args: Record<MutationUpsertFeedbackSubjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackSubjectWhereUniqueInput, create: FeedbackSubjectCreateInput, update: FeedbackSubjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject> | prisma.FeedbackSubject
  }
  deleteFeedbackSubject: {
    type: 'FeedbackSubject'
    args: Record<MutationDeleteFeedbackSubjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackSubjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject | null> | prisma.FeedbackSubject | null
  }
  deleteManyFeedbackSubjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFeedbackSubjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FeedbackSubjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFeedbackMedia: {
    type: 'FeedbackMedia'
    args: Record<MutationCreateFeedbackMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackMediaCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia> | prisma.FeedbackMedia
  }
  updateFeedbackMedia: {
    type: 'FeedbackMedia'
    args: Record<MutationUpdateFeedbackMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackMediaUpdateInput, where: FeedbackMediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia | null> | prisma.FeedbackMedia | null
  }
  updateManyFeedbackMedias: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFeedbackMediasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackMediaUpdateManyMutationInput, where?: FeedbackMediaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFeedbackMedia: {
    type: 'FeedbackMedia'
    args: Record<MutationUpsertFeedbackMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackMediaWhereUniqueInput, create: FeedbackMediaCreateInput, update: FeedbackMediaUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia> | prisma.FeedbackMedia
  }
  deleteFeedbackMedia: {
    type: 'FeedbackMedia'
    args: Record<MutationDeleteFeedbackMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackMediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia | null> | prisma.FeedbackMedia | null
  }
  deleteManyFeedbackMedias: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFeedbackMediasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FeedbackMediaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationCreateFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackRoundCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound> | prisma.FeedbackRound
  }
  updateFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationUpdateFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackRoundUpdateInput, where: FeedbackRoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  updateManyFeedbackRounds: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackRoundUpdateManyMutationInput, where?: FeedbackRoundWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationUpsertFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackRoundWhereUniqueInput, create: FeedbackRoundCreateInput, update: FeedbackRoundUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound> | prisma.FeedbackRound
  }
  deleteFeedbackRound: {
    type: 'FeedbackRound'
    args: Record<MutationDeleteFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackRoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  deleteManyFeedbackRounds: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFeedbackRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FeedbackRoundWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'feedbackProject', args?: SubscriptionFeedbackProjectArgs[] | false, alias?: string  } 
  | { name: 'feedbackSubject', args?: SubscriptionFeedbackSubjectArgs[] | false, alias?: string  } 
  | { name: 'feedbackMedia', args?: SubscriptionFeedbackMediaArgs[] | false, alias?: string  } 
  | { name: 'feedbackRound', args?: SubscriptionFeedbackRoundArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'feedbackProject'
  | 'feedbackSubject'
  | 'feedbackMedia'
  | 'feedbackRound'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionFeedbackProjectArgs =
  | 'where'
type SubscriptionFeedbackSubjectArgs =
  | 'where'
type SubscriptionFeedbackMediaArgs =
  | 'where'
type SubscriptionFeedbackRoundArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  feedbackProject: {
    type: 'FeedbackProjectSubscriptionPayload'
    args: Record<SubscriptionFeedbackProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FeedbackProjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProjectSubscriptionPayload | null> | prisma.FeedbackProjectSubscriptionPayload | null
  }
  feedbackSubject: {
    type: 'FeedbackSubjectSubscriptionPayload'
    args: Record<SubscriptionFeedbackSubjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FeedbackSubjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubjectSubscriptionPayload | null> | prisma.FeedbackSubjectSubscriptionPayload | null
  }
  feedbackMedia: {
    type: 'FeedbackMediaSubscriptionPayload'
    args: Record<SubscriptionFeedbackMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FeedbackMediaSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMediaSubscriptionPayload | null> | prisma.FeedbackMediaSubscriptionPayload | null
  }
  feedbackRound: {
    type: 'FeedbackRoundSubscriptionPayload'
    args: Record<SubscriptionFeedbackRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FeedbackRoundSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundSubscriptionPayload | null> | prisma.FeedbackRoundSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackProjectSubscriptionPayload

type FeedbackProjectSubscriptionPayloadObject =
  | FeedbackProjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FeedbackProjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FeedbackProjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FeedbackProject'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProject | null> | prisma.FeedbackProject | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FeedbackProjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackProjectPreviousValues | null> | prisma.FeedbackProjectPreviousValues | null
  }
}
  

// Types for FeedbackProjectPreviousValues

type FeedbackProjectPreviousValuesObject =
  | FeedbackProjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FeedbackProjectPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface FeedbackProjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackSubjectSubscriptionPayload

type FeedbackSubjectSubscriptionPayloadObject =
  | FeedbackSubjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FeedbackSubjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FeedbackSubjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackSubjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FeedbackSubject'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackSubjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubject | null> | prisma.FeedbackSubject | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FeedbackSubjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackSubjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubjectPreviousValues | null> | prisma.FeedbackSubjectPreviousValues | null
  }
}
  

// Types for FeedbackSubjectPreviousValues

type FeedbackSubjectPreviousValuesObject =
  | FeedbackSubjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FeedbackSubjectPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface FeedbackSubjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackMediaSubscriptionPayload

type FeedbackMediaSubscriptionPayloadObject =
  | FeedbackMediaSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FeedbackMediaSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FeedbackMediaSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackMediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FeedbackMedia'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackMediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMedia | null> | prisma.FeedbackMedia | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FeedbackMediaPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackMediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackMediaPreviousValues | null> | prisma.FeedbackMediaPreviousValues | null
  }
}
  

// Types for FeedbackMediaPreviousValues

type FeedbackMediaPreviousValuesObject =
  | FeedbackMediaPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FeedbackMediaPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface FeedbackMediaPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackRoundSubscriptionPayload

type FeedbackRoundSubscriptionPayloadObject =
  | FeedbackRoundSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FeedbackRoundSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FeedbackRoundSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackRoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FeedbackRound'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackRoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRound | null> | prisma.FeedbackRound | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FeedbackRoundPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackRoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackRoundPreviousValues | null> | prisma.FeedbackRoundPreviousValues | null
  }
}
  

// Types for FeedbackRoundPreviousValues

type FeedbackRoundPreviousValuesObject =
  | FeedbackRoundPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'roundEnd', args?: [] | false, alias?: string  } 

type FeedbackRoundPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'roundEnd'



  

export interface FeedbackRoundPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  roundEnd: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface FeedbackProjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdBy?: UserWhereInput | null
  AND?: FeedbackProjectWhereInput[]
  OR?: FeedbackProjectWhereInput[]
  NOT?: FeedbackProjectWhereInput[]
}
export type FeedbackProjectWhereInputInputObject =
  | Extract<keyof FeedbackProjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  feedbackProjects_every?: FeedbackProjectWhereInput | null
  feedbackProjects_some?: FeedbackProjectWhereInput | null
  feedbackProjects_none?: FeedbackProjectWhereInput | null
  feedbackRounds_every?: FeedbackRoundWhereInput | null
  feedbackRounds_some?: FeedbackRoundWhereInput | null
  feedbackRounds_none?: FeedbackRoundWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'feedbackProjects_every', alias?: string  } 
  | { name: 'feedbackProjects_some', alias?: string  } 
  | { name: 'feedbackProjects_none', alias?: string  } 
  | { name: 'feedbackRounds_every', alias?: string  } 
  | { name: 'feedbackRounds_some', alias?: string  } 
  | { name: 'feedbackRounds_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  roundEnd?: string | null
  roundEnd_not?: string | null
  roundEnd_in?: string[]
  roundEnd_not_in?: string[]
  roundEnd_lt?: string | null
  roundEnd_lte?: string | null
  roundEnd_gt?: string | null
  roundEnd_gte?: string | null
  users_every?: UserWhereInput | null
  users_some?: UserWhereInput | null
  users_none?: UserWhereInput | null
  AND?: FeedbackRoundWhereInput[]
  OR?: FeedbackRoundWhereInput[]
  NOT?: FeedbackRoundWhereInput[]
}
export type FeedbackRoundWhereInputInputObject =
  | Extract<keyof FeedbackRoundWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'roundEnd_not', alias?: string  } 
  | { name: 'roundEnd_in', alias?: string  } 
  | { name: 'roundEnd_not_in', alias?: string  } 
  | { name: 'roundEnd_lt', alias?: string  } 
  | { name: 'roundEnd_lte', alias?: string  } 
  | { name: 'roundEnd_gt', alias?: string  } 
  | { name: 'roundEnd_gte', alias?: string  } 
  | { name: 'users_every', alias?: string  } 
  | { name: 'users_some', alias?: string  } 
  | { name: 'users_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackProjectWhereUniqueInput {
  id?: string | null
}
export type FeedbackProjectWhereUniqueInputInputObject =
  | Extract<keyof FeedbackProjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FeedbackSubjectWhereUniqueInput {
  id?: string | null
}
export type FeedbackSubjectWhereUniqueInputInputObject =
  | Extract<keyof FeedbackSubjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FeedbackSubjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  project?: FeedbackProjectWhereInput | null
  createdBy?: UserWhereInput | null
  AND?: FeedbackSubjectWhereInput[]
  OR?: FeedbackSubjectWhereInput[]
  NOT?: FeedbackSubjectWhereInput[]
}
export type FeedbackSubjectWhereInputInputObject =
  | Extract<keyof FeedbackSubjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackMediaWhereUniqueInput {
  id?: string | null
}
export type FeedbackMediaWhereUniqueInputInputObject =
  | Extract<keyof FeedbackMediaWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FeedbackMediaWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  subject?: FeedbackProjectWhereInput | null
  AND?: FeedbackMediaWhereInput[]
  OR?: FeedbackMediaWhereInput[]
  NOT?: FeedbackMediaWhereInput[]
}
export type FeedbackMediaWhereInputInputObject =
  | Extract<keyof FeedbackMediaWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'subject', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundWhereUniqueInput {
  id?: string | null
}
export type FeedbackRoundWhereUniqueInputInputObject =
  | Extract<keyof FeedbackRoundWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  email?: string
  feedbackProjects?: FeedbackProjectCreateManyWithoutCreatedByInput | null
  feedbackRounds?: FeedbackRoundCreateManyWithoutUsersInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'feedbackProjects', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface FeedbackProjectCreateManyWithoutCreatedByInput {
  create?: FeedbackProjectCreateWithoutCreatedByInput[]
  connect?: FeedbackProjectWhereUniqueInput[]
}
export type FeedbackProjectCreateManyWithoutCreatedByInputInputObject =
  | Extract<keyof FeedbackProjectCreateManyWithoutCreatedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackProjectCreateWithoutCreatedByInput {
  id?: string | null
  name?: string
}
export type FeedbackProjectCreateWithoutCreatedByInputInputObject =
  | Extract<keyof FeedbackProjectCreateWithoutCreatedByInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface FeedbackRoundCreateManyWithoutUsersInput {
  create?: FeedbackRoundCreateWithoutUsersInput[]
  connect?: FeedbackRoundWhereUniqueInput[]
}
export type FeedbackRoundCreateManyWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundCreateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackRoundCreateWithoutUsersInput {
  id?: string | null
  roundEnd?: string | null
}
export type FeedbackRoundCreateWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundCreateWithoutUsersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  feedbackProjects?: FeedbackProjectUpdateManyWithoutCreatedByInput | null
  feedbackRounds?: FeedbackRoundUpdateManyWithoutUsersInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'feedbackProjects', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface FeedbackProjectUpdateManyWithoutCreatedByInput {
  create?: FeedbackProjectCreateWithoutCreatedByInput[]
  delete?: FeedbackProjectWhereUniqueInput[]
  connect?: FeedbackProjectWhereUniqueInput[]
  set?: FeedbackProjectWhereUniqueInput[]
  disconnect?: FeedbackProjectWhereUniqueInput[]
  update?: FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInput[]
  upsert?: FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInput[]
  deleteMany?: FeedbackProjectScalarWhereInput[]
  updateMany?: FeedbackProjectUpdateManyWithWhereNestedInput[]
}
export type FeedbackProjectUpdateManyWithoutCreatedByInputInputObject =
  | Extract<keyof FeedbackProjectUpdateManyWithoutCreatedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInput {
  where?: FeedbackProjectWhereUniqueInput
  data?: FeedbackProjectUpdateWithoutCreatedByDataInput
}
export type FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInputInputObject =
  | Extract<keyof FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FeedbackProjectUpdateWithoutCreatedByDataInput {
  name?: string | null
}
export type FeedbackProjectUpdateWithoutCreatedByDataInputInputObject =
  | Extract<keyof FeedbackProjectUpdateWithoutCreatedByDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInput {
  where?: FeedbackProjectWhereUniqueInput
  update?: FeedbackProjectUpdateWithoutCreatedByDataInput
  create?: FeedbackProjectCreateWithoutCreatedByInput
}
export type FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInputInputObject =
  | Extract<keyof FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FeedbackProjectScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: FeedbackProjectScalarWhereInput[]
  OR?: FeedbackProjectScalarWhereInput[]
  NOT?: FeedbackProjectScalarWhereInput[]
}
export type FeedbackProjectScalarWhereInputInputObject =
  | Extract<keyof FeedbackProjectScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackProjectUpdateManyWithWhereNestedInput {
  where?: FeedbackProjectScalarWhereInput
  data?: FeedbackProjectUpdateManyDataInput
}
export type FeedbackProjectUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof FeedbackProjectUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FeedbackProjectUpdateManyDataInput {
  name?: string | null
}
export type FeedbackProjectUpdateManyDataInputInputObject =
  | Extract<keyof FeedbackProjectUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackRoundUpdateManyWithoutUsersInput {
  create?: FeedbackRoundCreateWithoutUsersInput[]
  delete?: FeedbackRoundWhereUniqueInput[]
  connect?: FeedbackRoundWhereUniqueInput[]
  set?: FeedbackRoundWhereUniqueInput[]
  disconnect?: FeedbackRoundWhereUniqueInput[]
  update?: FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput[]
  upsert?: FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput[]
  deleteMany?: FeedbackRoundScalarWhereInput[]
  updateMany?: FeedbackRoundUpdateManyWithWhereNestedInput[]
}
export type FeedbackRoundUpdateManyWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput {
  where?: FeedbackRoundWhereUniqueInput
  data?: FeedbackRoundUpdateWithoutUsersDataInput
}
export type FeedbackRoundUpdateWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FeedbackRoundUpdateWithoutUsersDataInput {
  roundEnd?: string | null
}
export type FeedbackRoundUpdateWithoutUsersDataInputInputObject =
  | Extract<keyof FeedbackRoundUpdateWithoutUsersDataInput, string>
  | { name: 'roundEnd', alias?: string  } 
  
export interface FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput {
  where?: FeedbackRoundWhereUniqueInput
  update?: FeedbackRoundUpdateWithoutUsersDataInput
  create?: FeedbackRoundCreateWithoutUsersInput
}
export type FeedbackRoundUpsertWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FeedbackRoundScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  roundEnd?: string | null
  roundEnd_not?: string | null
  roundEnd_in?: string[]
  roundEnd_not_in?: string[]
  roundEnd_lt?: string | null
  roundEnd_lte?: string | null
  roundEnd_gt?: string | null
  roundEnd_gte?: string | null
  AND?: FeedbackRoundScalarWhereInput[]
  OR?: FeedbackRoundScalarWhereInput[]
  NOT?: FeedbackRoundScalarWhereInput[]
}
export type FeedbackRoundScalarWhereInputInputObject =
  | Extract<keyof FeedbackRoundScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'roundEnd_not', alias?: string  } 
  | { name: 'roundEnd_in', alias?: string  } 
  | { name: 'roundEnd_not_in', alias?: string  } 
  | { name: 'roundEnd_lt', alias?: string  } 
  | { name: 'roundEnd_lte', alias?: string  } 
  | { name: 'roundEnd_gt', alias?: string  } 
  | { name: 'roundEnd_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundUpdateManyWithWhereNestedInput {
  where?: FeedbackRoundScalarWhereInput
  data?: FeedbackRoundUpdateManyDataInput
}
export type FeedbackRoundUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FeedbackRoundUpdateManyDataInput {
  roundEnd?: string | null
}
export type FeedbackRoundUpdateManyDataInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyDataInput, string>
  | { name: 'roundEnd', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface FeedbackProjectCreateInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneWithoutFeedbackProjectsInput | null
}
export type FeedbackProjectCreateInputInputObject =
  | Extract<keyof FeedbackProjectCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface UserCreateOneWithoutFeedbackProjectsInput {
  create?: UserCreateWithoutFeedbackProjectsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutFeedbackProjectsInputInputObject =
  | Extract<keyof UserCreateOneWithoutFeedbackProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutFeedbackProjectsInput {
  id?: string | null
  name?: string
  email?: string
  feedbackRounds?: FeedbackRoundCreateManyWithoutUsersInput | null
}
export type UserCreateWithoutFeedbackProjectsInputInputObject =
  | Extract<keyof UserCreateWithoutFeedbackProjectsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface FeedbackProjectUpdateInput {
  name?: string | null
  createdBy?: UserUpdateOneWithoutFeedbackProjectsInput | null
}
export type FeedbackProjectUpdateInputInputObject =
  | Extract<keyof FeedbackProjectUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface UserUpdateOneWithoutFeedbackProjectsInput {
  create?: UserCreateWithoutFeedbackProjectsInput | null
  update?: UserUpdateWithoutFeedbackProjectsDataInput | null
  upsert?: UserUpsertWithoutFeedbackProjectsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutFeedbackProjectsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutFeedbackProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutFeedbackProjectsDataInput {
  name?: string | null
  email?: string | null
  feedbackRounds?: FeedbackRoundUpdateManyWithoutUsersInput | null
}
export type UserUpdateWithoutFeedbackProjectsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutFeedbackProjectsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface UserUpsertWithoutFeedbackProjectsInput {
  update?: UserUpdateWithoutFeedbackProjectsDataInput
  create?: UserCreateWithoutFeedbackProjectsInput
}
export type UserUpsertWithoutFeedbackProjectsInputInputObject =
  | Extract<keyof UserUpsertWithoutFeedbackProjectsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FeedbackProjectUpdateManyMutationInput {
  name?: string | null
}
export type FeedbackProjectUpdateManyMutationInputInputObject =
  | Extract<keyof FeedbackProjectUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackSubjectCreateInput {
  id?: string | null
  name?: string
  project?: FeedbackProjectCreateOneInput
  createdBy?: UserCreateOneInput | null
}
export type FeedbackSubjectCreateInputInputObject =
  | Extract<keyof FeedbackSubjectCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface FeedbackProjectCreateOneInput {
  create?: FeedbackProjectCreateInput | null
  connect?: FeedbackProjectWhereUniqueInput | null
}
export type FeedbackProjectCreateOneInputInputObject =
  | Extract<keyof FeedbackProjectCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackSubjectUpdateInput {
  name?: string | null
  project?: FeedbackProjectUpdateOneRequiredInput | null
  createdBy?: UserUpdateOneInput | null
}
export type FeedbackSubjectUpdateInputInputObject =
  | Extract<keyof FeedbackSubjectUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface FeedbackProjectUpdateOneRequiredInput {
  create?: FeedbackProjectCreateInput | null
  update?: FeedbackProjectUpdateDataInput | null
  upsert?: FeedbackProjectUpsertNestedInput | null
  connect?: FeedbackProjectWhereUniqueInput | null
}
export type FeedbackProjectUpdateOneRequiredInputInputObject =
  | Extract<keyof FeedbackProjectUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackProjectUpdateDataInput {
  name?: string | null
  createdBy?: UserUpdateOneWithoutFeedbackProjectsInput | null
}
export type FeedbackProjectUpdateDataInputInputObject =
  | Extract<keyof FeedbackProjectUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface FeedbackProjectUpsertNestedInput {
  update?: FeedbackProjectUpdateDataInput
  create?: FeedbackProjectCreateInput
}
export type FeedbackProjectUpsertNestedInputInputObject =
  | Extract<keyof FeedbackProjectUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateOneInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneInputInputObject =
  | Extract<keyof UserUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  name?: string | null
  email?: string | null
  feedbackProjects?: FeedbackProjectUpdateManyWithoutCreatedByInput | null
  feedbackRounds?: FeedbackRoundUpdateManyWithoutUsersInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'feedbackProjects', alias?: string  } 
  | { name: 'feedbackRounds', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FeedbackSubjectUpdateManyMutationInput {
  name?: string | null
}
export type FeedbackSubjectUpdateManyMutationInputInputObject =
  | Extract<keyof FeedbackSubjectUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackMediaCreateInput {
  id?: string | null
  name?: string
  subject?: FeedbackProjectCreateOneInput
}
export type FeedbackMediaCreateInputInputObject =
  | Extract<keyof FeedbackMediaCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'subject', alias?: string  } 
  
export interface FeedbackMediaUpdateInput {
  name?: string | null
  subject?: FeedbackProjectUpdateOneRequiredInput | null
}
export type FeedbackMediaUpdateInputInputObject =
  | Extract<keyof FeedbackMediaUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'subject', alias?: string  } 
  
export interface FeedbackMediaUpdateManyMutationInput {
  name?: string | null
}
export type FeedbackMediaUpdateManyMutationInputInputObject =
  | Extract<keyof FeedbackMediaUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FeedbackRoundCreateInput {
  id?: string | null
  roundEnd?: string | null
  users?: UserCreateManyWithoutFeedbackRoundsInput | null
}
export type FeedbackRoundCreateInputInputObject =
  | Extract<keyof FeedbackRoundCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserCreateManyWithoutFeedbackRoundsInput {
  create?: UserCreateWithoutFeedbackRoundsInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserCreateManyWithoutFeedbackRoundsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutFeedbackRoundsInput {
  id?: string | null
  name?: string
  email?: string
  feedbackProjects?: FeedbackProjectCreateManyWithoutCreatedByInput | null
}
export type UserCreateWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserCreateWithoutFeedbackRoundsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'feedbackProjects', alias?: string  } 
  
export interface FeedbackRoundUpdateInput {
  roundEnd?: string | null
  users?: UserUpdateManyWithoutFeedbackRoundsInput | null
}
export type FeedbackRoundUpdateInputInputObject =
  | Extract<keyof FeedbackRoundUpdateInput, string>
  | { name: 'roundEnd', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserUpdateManyWithoutFeedbackRoundsInput {
  create?: UserCreateWithoutFeedbackRoundsInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserUpdateManyWithoutFeedbackRoundsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutFeedbackRoundsDataInput
}
export type UserUpdateWithWhereUniqueWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutFeedbackRoundsDataInput {
  name?: string | null
  email?: string | null
  feedbackProjects?: FeedbackProjectUpdateManyWithoutCreatedByInput | null
}
export type UserUpdateWithoutFeedbackRoundsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutFeedbackRoundsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'feedbackProjects', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutFeedbackRoundsDataInput
  create?: UserCreateWithoutFeedbackRoundsInput
}
export type UserUpsertWithWhereUniqueWithoutFeedbackRoundsInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  name?: string | null
  email?: string | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface FeedbackRoundUpdateManyMutationInput {
  roundEnd?: string | null
}
export type FeedbackRoundUpdateManyMutationInputInputObject =
  | Extract<keyof FeedbackRoundUpdateManyMutationInput, string>
  | { name: 'roundEnd', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackProjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FeedbackProjectWhereInput | null
  AND?: FeedbackProjectSubscriptionWhereInput[]
  OR?: FeedbackProjectSubscriptionWhereInput[]
  NOT?: FeedbackProjectSubscriptionWhereInput[]
}
export type FeedbackProjectSubscriptionWhereInputInputObject =
  | Extract<keyof FeedbackProjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackSubjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FeedbackSubjectWhereInput | null
  AND?: FeedbackSubjectSubscriptionWhereInput[]
  OR?: FeedbackSubjectSubscriptionWhereInput[]
  NOT?: FeedbackSubjectSubscriptionWhereInput[]
}
export type FeedbackSubjectSubscriptionWhereInputInputObject =
  | Extract<keyof FeedbackSubjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackMediaSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FeedbackMediaWhereInput | null
  AND?: FeedbackMediaSubscriptionWhereInput[]
  OR?: FeedbackMediaSubscriptionWhereInput[]
  NOT?: FeedbackMediaSubscriptionWhereInput[]
}
export type FeedbackMediaSubscriptionWhereInputInputObject =
  | Extract<keyof FeedbackMediaSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackRoundSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FeedbackRoundWhereInput | null
  AND?: FeedbackRoundSubscriptionWhereInput[]
  OR?: FeedbackRoundSubscriptionWhereInput[]
  NOT?: FeedbackRoundSubscriptionWhereInput[]
}
export type FeedbackRoundSubscriptionWhereInputInputObject =
  | Extract<keyof FeedbackRoundSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type FeedbackProjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FeedbackRoundOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'roundEnd_ASC'
  | 'roundEnd_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FeedbackSubjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FeedbackMediaOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  