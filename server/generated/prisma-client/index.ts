// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  feedbackMedia: (where?: FeedbackMediaWhereInput) => Promise<boolean>;
  feedbackProject: (where?: FeedbackProjectWhereInput) => Promise<boolean>;
  feedbackRound: (where?: FeedbackRoundWhereInput) => Promise<boolean>;
  feedbackSubject: (where?: FeedbackSubjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  feedbackMedia: (
    where: FeedbackMediaWhereUniqueInput
  ) => FeedbackMediaNullablePromise;
  feedbackMedias: (args?: {
    where?: FeedbackMediaWhereInput;
    orderBy?: FeedbackMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FeedbackMedia>;
  feedbackMediasConnection: (args?: {
    where?: FeedbackMediaWhereInput;
    orderBy?: FeedbackMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedbackMediaConnectionPromise;
  feedbackProject: (
    where: FeedbackProjectWhereUniqueInput
  ) => FeedbackProjectNullablePromise;
  feedbackProjects: (args?: {
    where?: FeedbackProjectWhereInput;
    orderBy?: FeedbackProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FeedbackProject>;
  feedbackProjectsConnection: (args?: {
    where?: FeedbackProjectWhereInput;
    orderBy?: FeedbackProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedbackProjectConnectionPromise;
  feedbackRound: (
    where: FeedbackRoundWhereUniqueInput
  ) => FeedbackRoundNullablePromise;
  feedbackRounds: (args?: {
    where?: FeedbackRoundWhereInput;
    orderBy?: FeedbackRoundOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FeedbackRound>;
  feedbackRoundsConnection: (args?: {
    where?: FeedbackRoundWhereInput;
    orderBy?: FeedbackRoundOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedbackRoundConnectionPromise;
  feedbackSubject: (
    where: FeedbackSubjectWhereUniqueInput
  ) => FeedbackSubjectNullablePromise;
  feedbackSubjects: (args?: {
    where?: FeedbackSubjectWhereInput;
    orderBy?: FeedbackSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FeedbackSubject>;
  feedbackSubjectsConnection: (args?: {
    where?: FeedbackSubjectWhereInput;
    orderBy?: FeedbackSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedbackSubjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFeedbackMedia: (data: FeedbackMediaCreateInput) => FeedbackMediaPromise;
  updateFeedbackMedia: (args: {
    data: FeedbackMediaUpdateInput;
    where: FeedbackMediaWhereUniqueInput;
  }) => FeedbackMediaPromise;
  updateManyFeedbackMedias: (args: {
    data: FeedbackMediaUpdateManyMutationInput;
    where?: FeedbackMediaWhereInput;
  }) => BatchPayloadPromise;
  upsertFeedbackMedia: (args: {
    where: FeedbackMediaWhereUniqueInput;
    create: FeedbackMediaCreateInput;
    update: FeedbackMediaUpdateInput;
  }) => FeedbackMediaPromise;
  deleteFeedbackMedia: (
    where: FeedbackMediaWhereUniqueInput
  ) => FeedbackMediaPromise;
  deleteManyFeedbackMedias: (
    where?: FeedbackMediaWhereInput
  ) => BatchPayloadPromise;
  createFeedbackProject: (
    data: FeedbackProjectCreateInput
  ) => FeedbackProjectPromise;
  updateFeedbackProject: (args: {
    data: FeedbackProjectUpdateInput;
    where: FeedbackProjectWhereUniqueInput;
  }) => FeedbackProjectPromise;
  updateManyFeedbackProjects: (args: {
    data: FeedbackProjectUpdateManyMutationInput;
    where?: FeedbackProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertFeedbackProject: (args: {
    where: FeedbackProjectWhereUniqueInput;
    create: FeedbackProjectCreateInput;
    update: FeedbackProjectUpdateInput;
  }) => FeedbackProjectPromise;
  deleteFeedbackProject: (
    where: FeedbackProjectWhereUniqueInput
  ) => FeedbackProjectPromise;
  deleteManyFeedbackProjects: (
    where?: FeedbackProjectWhereInput
  ) => BatchPayloadPromise;
  createFeedbackRound: (data: FeedbackRoundCreateInput) => FeedbackRoundPromise;
  updateFeedbackRound: (args: {
    data: FeedbackRoundUpdateInput;
    where: FeedbackRoundWhereUniqueInput;
  }) => FeedbackRoundPromise;
  updateManyFeedbackRounds: (args: {
    data: FeedbackRoundUpdateManyMutationInput;
    where?: FeedbackRoundWhereInput;
  }) => BatchPayloadPromise;
  upsertFeedbackRound: (args: {
    where: FeedbackRoundWhereUniqueInput;
    create: FeedbackRoundCreateInput;
    update: FeedbackRoundUpdateInput;
  }) => FeedbackRoundPromise;
  deleteFeedbackRound: (
    where: FeedbackRoundWhereUniqueInput
  ) => FeedbackRoundPromise;
  deleteManyFeedbackRounds: (
    where?: FeedbackRoundWhereInput
  ) => BatchPayloadPromise;
  createFeedbackSubject: (
    data: FeedbackSubjectCreateInput
  ) => FeedbackSubjectPromise;
  updateFeedbackSubject: (args: {
    data: FeedbackSubjectUpdateInput;
    where: FeedbackSubjectWhereUniqueInput;
  }) => FeedbackSubjectPromise;
  updateManyFeedbackSubjects: (args: {
    data: FeedbackSubjectUpdateManyMutationInput;
    where?: FeedbackSubjectWhereInput;
  }) => BatchPayloadPromise;
  upsertFeedbackSubject: (args: {
    where: FeedbackSubjectWhereUniqueInput;
    create: FeedbackSubjectCreateInput;
    update: FeedbackSubjectUpdateInput;
  }) => FeedbackSubjectPromise;
  deleteFeedbackSubject: (
    where: FeedbackSubjectWhereUniqueInput
  ) => FeedbackSubjectPromise;
  deleteManyFeedbackSubjects: (
    where?: FeedbackSubjectWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  feedbackMedia: (
    where?: FeedbackMediaSubscriptionWhereInput
  ) => FeedbackMediaSubscriptionPayloadSubscription;
  feedbackProject: (
    where?: FeedbackProjectSubscriptionWhereInput
  ) => FeedbackProjectSubscriptionPayloadSubscription;
  feedbackRound: (
    where?: FeedbackRoundSubscriptionWhereInput
  ) => FeedbackRoundSubscriptionPayloadSubscription;
  feedbackSubject: (
    where?: FeedbackSubjectSubscriptionWhereInput
  ) => FeedbackSubjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FeedbackProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FeedbackRoundOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "roundEnd_ASC"
  | "roundEnd_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FeedbackMediaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FeedbackSubjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FeedbackMediaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FeedbackProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<FeedbackProjectWhereInput[] | FeedbackProjectWhereInput>;
  OR?: Maybe<FeedbackProjectWhereInput[] | FeedbackProjectWhereInput>;
  NOT?: Maybe<FeedbackProjectWhereInput[] | FeedbackProjectWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  feedbackProjects_every?: Maybe<FeedbackProjectWhereInput>;
  feedbackProjects_some?: Maybe<FeedbackProjectWhereInput>;
  feedbackProjects_none?: Maybe<FeedbackProjectWhereInput>;
  feedbackRounds_every?: Maybe<FeedbackRoundWhereInput>;
  feedbackRounds_some?: Maybe<FeedbackRoundWhereInput>;
  feedbackRounds_none?: Maybe<FeedbackRoundWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface FeedbackRoundWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  roundEnd?: Maybe<DateTimeInput>;
  roundEnd_not?: Maybe<DateTimeInput>;
  roundEnd_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  roundEnd_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  roundEnd_lt?: Maybe<DateTimeInput>;
  roundEnd_lte?: Maybe<DateTimeInput>;
  roundEnd_gt?: Maybe<DateTimeInput>;
  roundEnd_gte?: Maybe<DateTimeInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<FeedbackRoundWhereInput[] | FeedbackRoundWhereInput>;
  OR?: Maybe<FeedbackRoundWhereInput[] | FeedbackRoundWhereInput>;
  NOT?: Maybe<FeedbackRoundWhereInput[] | FeedbackRoundWhereInput>;
}

export interface FeedbackMediaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  subject?: Maybe<FeedbackProjectWhereInput>;
  AND?: Maybe<FeedbackMediaWhereInput[] | FeedbackMediaWhereInput>;
  OR?: Maybe<FeedbackMediaWhereInput[] | FeedbackMediaWhereInput>;
  NOT?: Maybe<FeedbackMediaWhereInput[] | FeedbackMediaWhereInput>;
}

export type FeedbackProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FeedbackRoundWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FeedbackSubjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FeedbackSubjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  project?: Maybe<FeedbackProjectWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<FeedbackSubjectWhereInput[] | FeedbackSubjectWhereInput>;
  OR?: Maybe<FeedbackSubjectWhereInput[] | FeedbackSubjectWhereInput>;
  NOT?: Maybe<FeedbackSubjectWhereInput[] | FeedbackSubjectWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface FeedbackMediaCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: FeedbackProjectCreateOneInput;
}

export interface FeedbackProjectCreateOneInput {
  create?: Maybe<FeedbackProjectCreateInput>;
  connect?: Maybe<FeedbackProjectWhereUniqueInput>;
}

export interface FeedbackProjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  createdBy?: Maybe<UserCreateOneWithoutFeedbackProjectsInput>;
}

export interface UserCreateOneWithoutFeedbackProjectsInput {
  create?: Maybe<UserCreateWithoutFeedbackProjectsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFeedbackProjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  feedbackRounds?: Maybe<FeedbackRoundCreateManyWithoutUsersInput>;
}

export interface FeedbackRoundCreateManyWithoutUsersInput {
  create?: Maybe<
    | FeedbackRoundCreateWithoutUsersInput[]
    | FeedbackRoundCreateWithoutUsersInput
  >;
  connect?: Maybe<
    FeedbackRoundWhereUniqueInput[] | FeedbackRoundWhereUniqueInput
  >;
}

export interface FeedbackRoundCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  roundEnd?: Maybe<DateTimeInput>;
}

export interface FeedbackMediaUpdateInput {
  name?: Maybe<String>;
  subject?: Maybe<FeedbackProjectUpdateOneRequiredInput>;
}

export interface FeedbackProjectUpdateOneRequiredInput {
  create?: Maybe<FeedbackProjectCreateInput>;
  update?: Maybe<FeedbackProjectUpdateDataInput>;
  upsert?: Maybe<FeedbackProjectUpsertNestedInput>;
  connect?: Maybe<FeedbackProjectWhereUniqueInput>;
}

export interface FeedbackProjectUpdateDataInput {
  name?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneWithoutFeedbackProjectsInput>;
}

export interface UserUpdateOneWithoutFeedbackProjectsInput {
  create?: Maybe<UserCreateWithoutFeedbackProjectsInput>;
  update?: Maybe<UserUpdateWithoutFeedbackProjectsDataInput>;
  upsert?: Maybe<UserUpsertWithoutFeedbackProjectsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFeedbackProjectsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  feedbackRounds?: Maybe<FeedbackRoundUpdateManyWithoutUsersInput>;
}

export interface FeedbackRoundUpdateManyWithoutUsersInput {
  create?: Maybe<
    | FeedbackRoundCreateWithoutUsersInput[]
    | FeedbackRoundCreateWithoutUsersInput
  >;
  delete?: Maybe<
    FeedbackRoundWhereUniqueInput[] | FeedbackRoundWhereUniqueInput
  >;
  connect?: Maybe<
    FeedbackRoundWhereUniqueInput[] | FeedbackRoundWhereUniqueInput
  >;
  set?: Maybe<FeedbackRoundWhereUniqueInput[] | FeedbackRoundWhereUniqueInput>;
  disconnect?: Maybe<
    FeedbackRoundWhereUniqueInput[] | FeedbackRoundWhereUniqueInput
  >;
  update?: Maybe<
    | FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput[]
    | FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput[]
    | FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<
    FeedbackRoundScalarWhereInput[] | FeedbackRoundScalarWhereInput
  >;
  updateMany?: Maybe<
    | FeedbackRoundUpdateManyWithWhereNestedInput[]
    | FeedbackRoundUpdateManyWithWhereNestedInput
  >;
}

export interface FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput {
  where: FeedbackRoundWhereUniqueInput;
  data: FeedbackRoundUpdateWithoutUsersDataInput;
}

export interface FeedbackRoundUpdateWithoutUsersDataInput {
  roundEnd?: Maybe<DateTimeInput>;
}

export interface FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput {
  where: FeedbackRoundWhereUniqueInput;
  update: FeedbackRoundUpdateWithoutUsersDataInput;
  create: FeedbackRoundCreateWithoutUsersInput;
}

export interface FeedbackRoundScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  roundEnd?: Maybe<DateTimeInput>;
  roundEnd_not?: Maybe<DateTimeInput>;
  roundEnd_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  roundEnd_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  roundEnd_lt?: Maybe<DateTimeInput>;
  roundEnd_lte?: Maybe<DateTimeInput>;
  roundEnd_gt?: Maybe<DateTimeInput>;
  roundEnd_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FeedbackRoundScalarWhereInput[] | FeedbackRoundScalarWhereInput>;
  OR?: Maybe<FeedbackRoundScalarWhereInput[] | FeedbackRoundScalarWhereInput>;
  NOT?: Maybe<FeedbackRoundScalarWhereInput[] | FeedbackRoundScalarWhereInput>;
}

export interface FeedbackRoundUpdateManyWithWhereNestedInput {
  where: FeedbackRoundScalarWhereInput;
  data: FeedbackRoundUpdateManyDataInput;
}

export interface FeedbackRoundUpdateManyDataInput {
  roundEnd?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutFeedbackProjectsInput {
  update: UserUpdateWithoutFeedbackProjectsDataInput;
  create: UserCreateWithoutFeedbackProjectsInput;
}

export interface FeedbackProjectUpsertNestedInput {
  update: FeedbackProjectUpdateDataInput;
  create: FeedbackProjectCreateInput;
}

export interface FeedbackMediaUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface FeedbackProjectUpdateInput {
  name?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneWithoutFeedbackProjectsInput>;
}

export interface FeedbackProjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface FeedbackRoundCreateInput {
  id?: Maybe<ID_Input>;
  roundEnd?: Maybe<DateTimeInput>;
  users?: Maybe<UserCreateManyWithoutFeedbackRoundsInput>;
}

export interface UserCreateManyWithoutFeedbackRoundsInput {
  create?: Maybe<
    | UserCreateWithoutFeedbackRoundsInput[]
    | UserCreateWithoutFeedbackRoundsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFeedbackRoundsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  feedbackProjects?: Maybe<FeedbackProjectCreateManyWithoutCreatedByInput>;
}

export interface FeedbackProjectCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | FeedbackProjectCreateWithoutCreatedByInput[]
    | FeedbackProjectCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    FeedbackProjectWhereUniqueInput[] | FeedbackProjectWhereUniqueInput
  >;
}

export interface FeedbackProjectCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface FeedbackRoundUpdateInput {
  roundEnd?: Maybe<DateTimeInput>;
  users?: Maybe<UserUpdateManyWithoutFeedbackRoundsInput>;
}

export interface UserUpdateManyWithoutFeedbackRoundsInput {
  create?: Maybe<
    | UserCreateWithoutFeedbackRoundsInput[]
    | UserCreateWithoutFeedbackRoundsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput[]
    | UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput[]
    | UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFeedbackRoundsDataInput;
}

export interface UserUpdateWithoutFeedbackRoundsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  feedbackProjects?: Maybe<FeedbackProjectUpdateManyWithoutCreatedByInput>;
}

export interface FeedbackProjectUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | FeedbackProjectCreateWithoutCreatedByInput[]
    | FeedbackProjectCreateWithoutCreatedByInput
  >;
  delete?: Maybe<
    FeedbackProjectWhereUniqueInput[] | FeedbackProjectWhereUniqueInput
  >;
  connect?: Maybe<
    FeedbackProjectWhereUniqueInput[] | FeedbackProjectWhereUniqueInput
  >;
  set?: Maybe<
    FeedbackProjectWhereUniqueInput[] | FeedbackProjectWhereUniqueInput
  >;
  disconnect?: Maybe<
    FeedbackProjectWhereUniqueInput[] | FeedbackProjectWhereUniqueInput
  >;
  update?: Maybe<
    | FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInput[]
    | FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInput[]
    | FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    FeedbackProjectScalarWhereInput[] | FeedbackProjectScalarWhereInput
  >;
  updateMany?: Maybe<
    | FeedbackProjectUpdateManyWithWhereNestedInput[]
    | FeedbackProjectUpdateManyWithWhereNestedInput
  >;
}

export interface FeedbackProjectUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FeedbackProjectWhereUniqueInput;
  data: FeedbackProjectUpdateWithoutCreatedByDataInput;
}

export interface FeedbackProjectUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
}

export interface FeedbackProjectUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FeedbackProjectWhereUniqueInput;
  update: FeedbackProjectUpdateWithoutCreatedByDataInput;
  create: FeedbackProjectCreateWithoutCreatedByInput;
}

export interface FeedbackProjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    FeedbackProjectScalarWhereInput[] | FeedbackProjectScalarWhereInput
  >;
  OR?: Maybe<
    FeedbackProjectScalarWhereInput[] | FeedbackProjectScalarWhereInput
  >;
  NOT?: Maybe<
    FeedbackProjectScalarWhereInput[] | FeedbackProjectScalarWhereInput
  >;
}

export interface FeedbackProjectUpdateManyWithWhereNestedInput {
  where: FeedbackProjectScalarWhereInput;
  data: FeedbackProjectUpdateManyDataInput;
}

export interface FeedbackProjectUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFeedbackRoundsDataInput;
  create: UserCreateWithoutFeedbackRoundsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface FeedbackRoundUpdateManyMutationInput {
  roundEnd?: Maybe<DateTimeInput>;
}

export interface FeedbackSubjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  project: FeedbackProjectCreateOneInput;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  feedbackProjects?: Maybe<FeedbackProjectCreateManyWithoutCreatedByInput>;
  feedbackRounds?: Maybe<FeedbackRoundCreateManyWithoutUsersInput>;
}

export interface FeedbackSubjectUpdateInput {
  name?: Maybe<String>;
  project?: Maybe<FeedbackProjectUpdateOneRequiredInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  feedbackProjects?: Maybe<FeedbackProjectUpdateManyWithoutCreatedByInput>;
  feedbackRounds?: Maybe<FeedbackRoundUpdateManyWithoutUsersInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface FeedbackSubjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  feedbackProjects?: Maybe<FeedbackProjectUpdateManyWithoutCreatedByInput>;
  feedbackRounds?: Maybe<FeedbackRoundUpdateManyWithoutUsersInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface FeedbackMediaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeedbackMediaWhereInput>;
  AND?: Maybe<
    FeedbackMediaSubscriptionWhereInput[] | FeedbackMediaSubscriptionWhereInput
  >;
  OR?: Maybe<
    FeedbackMediaSubscriptionWhereInput[] | FeedbackMediaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FeedbackMediaSubscriptionWhereInput[] | FeedbackMediaSubscriptionWhereInput
  >;
}

export interface FeedbackProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeedbackProjectWhereInput>;
  AND?: Maybe<
    | FeedbackProjectSubscriptionWhereInput[]
    | FeedbackProjectSubscriptionWhereInput
  >;
  OR?: Maybe<
    | FeedbackProjectSubscriptionWhereInput[]
    | FeedbackProjectSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FeedbackProjectSubscriptionWhereInput[]
    | FeedbackProjectSubscriptionWhereInput
  >;
}

export interface FeedbackRoundSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeedbackRoundWhereInput>;
  AND?: Maybe<
    FeedbackRoundSubscriptionWhereInput[] | FeedbackRoundSubscriptionWhereInput
  >;
  OR?: Maybe<
    FeedbackRoundSubscriptionWhereInput[] | FeedbackRoundSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FeedbackRoundSubscriptionWhereInput[] | FeedbackRoundSubscriptionWhereInput
  >;
}

export interface FeedbackSubjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeedbackSubjectWhereInput>;
  AND?: Maybe<
    | FeedbackSubjectSubscriptionWhereInput[]
    | FeedbackSubjectSubscriptionWhereInput
  >;
  OR?: Maybe<
    | FeedbackSubjectSubscriptionWhereInput[]
    | FeedbackSubjectSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FeedbackSubjectSubscriptionWhereInput[]
    | FeedbackSubjectSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface FeedbackMedia {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FeedbackMediaPromise
  extends Promise<FeedbackMedia>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  subject: <T = FeedbackProjectPromise>() => T;
}

export interface FeedbackMediaSubscription
  extends Promise<AsyncIterator<FeedbackMedia>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject: <T = FeedbackProjectSubscription>() => T;
}

export interface FeedbackMediaNullablePromise
  extends Promise<FeedbackMedia | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  subject: <T = FeedbackProjectPromise>() => T;
}

export interface FeedbackProject {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FeedbackProjectPromise
  extends Promise<FeedbackProject>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
}

export interface FeedbackProjectSubscription
  extends Promise<AsyncIterator<FeedbackProject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
}

export interface FeedbackProjectNullablePromise
  extends Promise<FeedbackProject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  feedbackProjects: <T = FragmentableArray<FeedbackProject>>(args?: {
    where?: FeedbackProjectWhereInput;
    orderBy?: FeedbackProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackRounds: <T = FragmentableArray<FeedbackRound>>(args?: {
    where?: FeedbackRoundWhereInput;
    orderBy?: FeedbackRoundOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  feedbackProjects: <
    T = Promise<AsyncIterator<FeedbackProjectSubscription>>
  >(args?: {
    where?: FeedbackProjectWhereInput;
    orderBy?: FeedbackProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackRounds: <
    T = Promise<AsyncIterator<FeedbackRoundSubscription>>
  >(args?: {
    where?: FeedbackRoundWhereInput;
    orderBy?: FeedbackRoundOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  feedbackProjects: <T = FragmentableArray<FeedbackProject>>(args?: {
    where?: FeedbackProjectWhereInput;
    orderBy?: FeedbackProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackRounds: <T = FragmentableArray<FeedbackRound>>(args?: {
    where?: FeedbackRoundWhereInput;
    orderBy?: FeedbackRoundOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FeedbackRound {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  roundEnd?: DateTimeOutput;
}

export interface FeedbackRoundPromise
  extends Promise<FeedbackRound>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  roundEnd: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FeedbackRoundSubscription
  extends Promise<AsyncIterator<FeedbackRound>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  roundEnd: () => Promise<AsyncIterator<DateTimeOutput>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FeedbackRoundNullablePromise
  extends Promise<FeedbackRound | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  roundEnd: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FeedbackMediaConnection {
  pageInfo: PageInfo;
  edges: FeedbackMediaEdge[];
}

export interface FeedbackMediaConnectionPromise
  extends Promise<FeedbackMediaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackMediaEdge>>() => T;
  aggregate: <T = AggregateFeedbackMediaPromise>() => T;
}

export interface FeedbackMediaConnectionSubscription
  extends Promise<AsyncIterator<FeedbackMediaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackMediaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackMediaSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FeedbackMediaEdge {
  node: FeedbackMedia;
  cursor: String;
}

export interface FeedbackMediaEdgePromise
  extends Promise<FeedbackMediaEdge>,
    Fragmentable {
  node: <T = FeedbackMediaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackMediaEdgeSubscription
  extends Promise<AsyncIterator<FeedbackMediaEdge>>,
    Fragmentable {
  node: <T = FeedbackMediaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedbackMedia {
  count: Int;
}

export interface AggregateFeedbackMediaPromise
  extends Promise<AggregateFeedbackMedia>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackMediaSubscription
  extends Promise<AsyncIterator<AggregateFeedbackMedia>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FeedbackProjectConnection {
  pageInfo: PageInfo;
  edges: FeedbackProjectEdge[];
}

export interface FeedbackProjectConnectionPromise
  extends Promise<FeedbackProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackProjectEdge>>() => T;
  aggregate: <T = AggregateFeedbackProjectPromise>() => T;
}

export interface FeedbackProjectConnectionSubscription
  extends Promise<AsyncIterator<FeedbackProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackProjectSubscription>() => T;
}

export interface FeedbackProjectEdge {
  node: FeedbackProject;
  cursor: String;
}

export interface FeedbackProjectEdgePromise
  extends Promise<FeedbackProjectEdge>,
    Fragmentable {
  node: <T = FeedbackProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackProjectEdgeSubscription
  extends Promise<AsyncIterator<FeedbackProjectEdge>>,
    Fragmentable {
  node: <T = FeedbackProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedbackProject {
  count: Int;
}

export interface AggregateFeedbackProjectPromise
  extends Promise<AggregateFeedbackProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackProjectSubscription
  extends Promise<AsyncIterator<AggregateFeedbackProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FeedbackRoundConnection {
  pageInfo: PageInfo;
  edges: FeedbackRoundEdge[];
}

export interface FeedbackRoundConnectionPromise
  extends Promise<FeedbackRoundConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackRoundEdge>>() => T;
  aggregate: <T = AggregateFeedbackRoundPromise>() => T;
}

export interface FeedbackRoundConnectionSubscription
  extends Promise<AsyncIterator<FeedbackRoundConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackRoundEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackRoundSubscription>() => T;
}

export interface FeedbackRoundEdge {
  node: FeedbackRound;
  cursor: String;
}

export interface FeedbackRoundEdgePromise
  extends Promise<FeedbackRoundEdge>,
    Fragmentable {
  node: <T = FeedbackRoundPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackRoundEdgeSubscription
  extends Promise<AsyncIterator<FeedbackRoundEdge>>,
    Fragmentable {
  node: <T = FeedbackRoundSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedbackRound {
  count: Int;
}

export interface AggregateFeedbackRoundPromise
  extends Promise<AggregateFeedbackRound>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackRoundSubscription
  extends Promise<AsyncIterator<AggregateFeedbackRound>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FeedbackSubject {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FeedbackSubjectPromise
  extends Promise<FeedbackSubject>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  project: <T = FeedbackProjectPromise>() => T;
  createdBy: <T = UserPromise>() => T;
}

export interface FeedbackSubjectSubscription
  extends Promise<AsyncIterator<FeedbackSubject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  project: <T = FeedbackProjectSubscription>() => T;
  createdBy: <T = UserSubscription>() => T;
}

export interface FeedbackSubjectNullablePromise
  extends Promise<FeedbackSubject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  project: <T = FeedbackProjectPromise>() => T;
  createdBy: <T = UserPromise>() => T;
}

export interface FeedbackSubjectConnection {
  pageInfo: PageInfo;
  edges: FeedbackSubjectEdge[];
}

export interface FeedbackSubjectConnectionPromise
  extends Promise<FeedbackSubjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackSubjectEdge>>() => T;
  aggregate: <T = AggregateFeedbackSubjectPromise>() => T;
}

export interface FeedbackSubjectConnectionSubscription
  extends Promise<AsyncIterator<FeedbackSubjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackSubjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackSubjectSubscription>() => T;
}

export interface FeedbackSubjectEdge {
  node: FeedbackSubject;
  cursor: String;
}

export interface FeedbackSubjectEdgePromise
  extends Promise<FeedbackSubjectEdge>,
    Fragmentable {
  node: <T = FeedbackSubjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackSubjectEdgeSubscription
  extends Promise<AsyncIterator<FeedbackSubjectEdge>>,
    Fragmentable {
  node: <T = FeedbackSubjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedbackSubject {
  count: Int;
}

export interface AggregateFeedbackSubjectPromise
  extends Promise<AggregateFeedbackSubject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackSubjectSubscription
  extends Promise<AsyncIterator<AggregateFeedbackSubject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FeedbackMediaSubscriptionPayload {
  mutation: MutationType;
  node: FeedbackMedia;
  updatedFields: String[];
  previousValues: FeedbackMediaPreviousValues;
}

export interface FeedbackMediaSubscriptionPayloadPromise
  extends Promise<FeedbackMediaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackMediaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackMediaPreviousValuesPromise>() => T;
}

export interface FeedbackMediaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackMediaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackMediaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackMediaPreviousValuesSubscription>() => T;
}

export interface FeedbackMediaPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FeedbackMediaPreviousValuesPromise
  extends Promise<FeedbackMediaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FeedbackMediaPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackMediaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FeedbackProjectSubscriptionPayload {
  mutation: MutationType;
  node: FeedbackProject;
  updatedFields: String[];
  previousValues: FeedbackProjectPreviousValues;
}

export interface FeedbackProjectSubscriptionPayloadPromise
  extends Promise<FeedbackProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackProjectPreviousValuesPromise>() => T;
}

export interface FeedbackProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackProjectPreviousValuesSubscription>() => T;
}

export interface FeedbackProjectPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FeedbackProjectPreviousValuesPromise
  extends Promise<FeedbackProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FeedbackProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FeedbackRoundSubscriptionPayload {
  mutation: MutationType;
  node: FeedbackRound;
  updatedFields: String[];
  previousValues: FeedbackRoundPreviousValues;
}

export interface FeedbackRoundSubscriptionPayloadPromise
  extends Promise<FeedbackRoundSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackRoundPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackRoundPreviousValuesPromise>() => T;
}

export interface FeedbackRoundSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackRoundSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackRoundSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackRoundPreviousValuesSubscription>() => T;
}

export interface FeedbackRoundPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  roundEnd?: DateTimeOutput;
}

export interface FeedbackRoundPreviousValuesPromise
  extends Promise<FeedbackRoundPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  roundEnd: () => Promise<DateTimeOutput>;
}

export interface FeedbackRoundPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackRoundPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  roundEnd: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FeedbackSubjectSubscriptionPayload {
  mutation: MutationType;
  node: FeedbackSubject;
  updatedFields: String[];
  previousValues: FeedbackSubjectPreviousValues;
}

export interface FeedbackSubjectSubscriptionPayloadPromise
  extends Promise<FeedbackSubjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackSubjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackSubjectPreviousValuesPromise>() => T;
}

export interface FeedbackSubjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackSubjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackSubjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackSubjectPreviousValuesSubscription>() => T;
}

export interface FeedbackSubjectPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FeedbackSubjectPreviousValuesPromise
  extends Promise<FeedbackSubjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FeedbackSubjectPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackSubjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "FeedbackProject",
    embedded: false
  },
  {
    name: "FeedbackSubject",
    embedded: false
  },
  {
    name: "FeedbackMedia",
    embedded: false
  },
  {
    name: "FeedbackRound",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
