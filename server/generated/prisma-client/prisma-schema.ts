// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDepartment {
  count: Int!
}

type AggregateFeedbackRound {
  count: Int!
}

type AggregateFeedbackTarget {
  count: Int!
}

type AggregateMedia {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateScript {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Department {
  id: ID!
  name: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  name: String!
  projects: ProjectCreateManyWithoutDepartmentsInput
}

input DepartmentCreateManyWithoutProjectsInput {
  create: [DepartmentCreateWithoutProjectsInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input DepartmentCreateWithoutProjectsInput {
  id: ID
  name: String!
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  id: ID!
  name: String!
}

input DepartmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DepartmentScalarWhereInput!]
  OR: [DepartmentScalarWhereInput!]
  NOT: [DepartmentScalarWhereInput!]
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateInput {
  name: String
  projects: ProjectUpdateManyWithoutDepartmentsInput
}

input DepartmentUpdateManyDataInput {
  name: String
}

input DepartmentUpdateManyMutationInput {
  name: String
}

input DepartmentUpdateManyWithoutProjectsInput {
  create: [DepartmentCreateWithoutProjectsInput!]
  delete: [DepartmentWhereUniqueInput!]
  connect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutProjectsInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutProjectsInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  updateMany: [DepartmentUpdateManyWithWhereNestedInput!]
}

input DepartmentUpdateManyWithWhereNestedInput {
  where: DepartmentScalarWhereInput!
  data: DepartmentUpdateManyDataInput!
}

input DepartmentUpdateWithoutProjectsDataInput {
  name: String
}

input DepartmentUpdateWithWhereUniqueWithoutProjectsInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateWithoutProjectsDataInput!
}

input DepartmentUpsertWithWhereUniqueWithoutProjectsInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateWithoutProjectsDataInput!
  create: DepartmentCreateWithoutProjectsInput!
}

input DepartmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: ID
}

type FeedbackRound {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  roundEnd: DateTime
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type FeedbackRoundConnection {
  pageInfo: PageInfo!
  edges: [FeedbackRoundEdge]!
  aggregate: AggregateFeedbackRound!
}

input FeedbackRoundCreateInput {
  id: ID
  roundEnd: DateTime
  users: UserCreateManyWithoutFeedbackRoundsInput
}

input FeedbackRoundCreateManyWithoutUsersInput {
  create: [FeedbackRoundCreateWithoutUsersInput!]
  connect: [FeedbackRoundWhereUniqueInput!]
}

input FeedbackRoundCreateWithoutUsersInput {
  id: ID
  roundEnd: DateTime
}

type FeedbackRoundEdge {
  node: FeedbackRound!
  cursor: String!
}

enum FeedbackRoundOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  roundEnd_ASC
  roundEnd_DESC
}

type FeedbackRoundPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  roundEnd: DateTime
}

input FeedbackRoundScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  roundEnd: DateTime
  roundEnd_not: DateTime
  roundEnd_in: [DateTime!]
  roundEnd_not_in: [DateTime!]
  roundEnd_lt: DateTime
  roundEnd_lte: DateTime
  roundEnd_gt: DateTime
  roundEnd_gte: DateTime
  AND: [FeedbackRoundScalarWhereInput!]
  OR: [FeedbackRoundScalarWhereInput!]
  NOT: [FeedbackRoundScalarWhereInput!]
}

type FeedbackRoundSubscriptionPayload {
  mutation: MutationType!
  node: FeedbackRound
  updatedFields: [String!]
  previousValues: FeedbackRoundPreviousValues
}

input FeedbackRoundSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedbackRoundWhereInput
  AND: [FeedbackRoundSubscriptionWhereInput!]
  OR: [FeedbackRoundSubscriptionWhereInput!]
  NOT: [FeedbackRoundSubscriptionWhereInput!]
}

input FeedbackRoundUpdateInput {
  roundEnd: DateTime
  users: UserUpdateManyWithoutFeedbackRoundsInput
}

input FeedbackRoundUpdateManyDataInput {
  roundEnd: DateTime
}

input FeedbackRoundUpdateManyMutationInput {
  roundEnd: DateTime
}

input FeedbackRoundUpdateManyWithoutUsersInput {
  create: [FeedbackRoundCreateWithoutUsersInput!]
  delete: [FeedbackRoundWhereUniqueInput!]
  connect: [FeedbackRoundWhereUniqueInput!]
  set: [FeedbackRoundWhereUniqueInput!]
  disconnect: [FeedbackRoundWhereUniqueInput!]
  update: [FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [FeedbackRoundScalarWhereInput!]
  updateMany: [FeedbackRoundUpdateManyWithWhereNestedInput!]
}

input FeedbackRoundUpdateManyWithWhereNestedInput {
  where: FeedbackRoundScalarWhereInput!
  data: FeedbackRoundUpdateManyDataInput!
}

input FeedbackRoundUpdateWithoutUsersDataInput {
  roundEnd: DateTime
}

input FeedbackRoundUpdateWithWhereUniqueWithoutUsersInput {
  where: FeedbackRoundWhereUniqueInput!
  data: FeedbackRoundUpdateWithoutUsersDataInput!
}

input FeedbackRoundUpsertWithWhereUniqueWithoutUsersInput {
  where: FeedbackRoundWhereUniqueInput!
  update: FeedbackRoundUpdateWithoutUsersDataInput!
  create: FeedbackRoundCreateWithoutUsersInput!
}

input FeedbackRoundWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  roundEnd: DateTime
  roundEnd_not: DateTime
  roundEnd_in: [DateTime!]
  roundEnd_not_in: [DateTime!]
  roundEnd_lt: DateTime
  roundEnd_lte: DateTime
  roundEnd_gt: DateTime
  roundEnd_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [FeedbackRoundWhereInput!]
  OR: [FeedbackRoundWhereInput!]
  NOT: [FeedbackRoundWhereInput!]
}

input FeedbackRoundWhereUniqueInput {
  id: ID
}

type FeedbackTarget {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  project: Project!
  createdBy: User
}

type FeedbackTargetConnection {
  pageInfo: PageInfo!
  edges: [FeedbackTargetEdge]!
  aggregate: AggregateFeedbackTarget!
}

input FeedbackTargetCreateInput {
  id: ID
  name: String!
  project: ProjectCreateOneInput!
  createdBy: UserCreateOneInput
}

input FeedbackTargetCreateOneInput {
  create: FeedbackTargetCreateInput
  connect: FeedbackTargetWhereUniqueInput
}

type FeedbackTargetEdge {
  node: FeedbackTarget!
  cursor: String!
}

enum FeedbackTargetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FeedbackTargetPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FeedbackTargetSubscriptionPayload {
  mutation: MutationType!
  node: FeedbackTarget
  updatedFields: [String!]
  previousValues: FeedbackTargetPreviousValues
}

input FeedbackTargetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedbackTargetWhereInput
  AND: [FeedbackTargetSubscriptionWhereInput!]
  OR: [FeedbackTargetSubscriptionWhereInput!]
  NOT: [FeedbackTargetSubscriptionWhereInput!]
}

input FeedbackTargetUpdateDataInput {
  name: String
  project: ProjectUpdateOneRequiredInput
  createdBy: UserUpdateOneInput
}

input FeedbackTargetUpdateInput {
  name: String
  project: ProjectUpdateOneRequiredInput
  createdBy: UserUpdateOneInput
}

input FeedbackTargetUpdateManyMutationInput {
  name: String
}

input FeedbackTargetUpdateOneRequiredInput {
  create: FeedbackTargetCreateInput
  update: FeedbackTargetUpdateDataInput
  upsert: FeedbackTargetUpsertNestedInput
  connect: FeedbackTargetWhereUniqueInput
}

input FeedbackTargetUpsertNestedInput {
  update: FeedbackTargetUpdateDataInput!
  create: FeedbackTargetCreateInput!
}

input FeedbackTargetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  project: ProjectWhereInput
  createdBy: UserWhereInput
  AND: [FeedbackTargetWhereInput!]
  OR: [FeedbackTargetWhereInput!]
  NOT: [FeedbackTargetWhereInput!]
}

input FeedbackTargetWhereUniqueInput {
  id: ID
}

scalar Long

type Media {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  target: FeedbackTarget!
}

type MediaConnection {
  pageInfo: PageInfo!
  edges: [MediaEdge]!
  aggregate: AggregateMedia!
}

input MediaCreateInput {
  id: ID
  name: String!
  target: FeedbackTargetCreateOneInput!
}

type MediaEdge {
  node: Media!
  cursor: String!
}

enum MediaOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MediaPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MediaSubscriptionPayload {
  mutation: MutationType!
  node: Media
  updatedFields: [String!]
  previousValues: MediaPreviousValues
}

input MediaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MediaWhereInput
  AND: [MediaSubscriptionWhereInput!]
  OR: [MediaSubscriptionWhereInput!]
  NOT: [MediaSubscriptionWhereInput!]
}

input MediaUpdateInput {
  name: String
  target: FeedbackTargetUpdateOneRequiredInput
}

input MediaUpdateManyMutationInput {
  name: String
}

input MediaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  target: FeedbackTargetWhereInput
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
}

input MediaWhereUniqueInput {
  id: ID
}

type Mutation {
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createFeedbackRound(data: FeedbackRoundCreateInput!): FeedbackRound!
  updateFeedbackRound(data: FeedbackRoundUpdateInput!, where: FeedbackRoundWhereUniqueInput!): FeedbackRound
  updateManyFeedbackRounds(data: FeedbackRoundUpdateManyMutationInput!, where: FeedbackRoundWhereInput): BatchPayload!
  upsertFeedbackRound(where: FeedbackRoundWhereUniqueInput!, create: FeedbackRoundCreateInput!, update: FeedbackRoundUpdateInput!): FeedbackRound!
  deleteFeedbackRound(where: FeedbackRoundWhereUniqueInput!): FeedbackRound
  deleteManyFeedbackRounds(where: FeedbackRoundWhereInput): BatchPayload!
  createFeedbackTarget(data: FeedbackTargetCreateInput!): FeedbackTarget!
  updateFeedbackTarget(data: FeedbackTargetUpdateInput!, where: FeedbackTargetWhereUniqueInput!): FeedbackTarget
  updateManyFeedbackTargets(data: FeedbackTargetUpdateManyMutationInput!, where: FeedbackTargetWhereInput): BatchPayload!
  upsertFeedbackTarget(where: FeedbackTargetWhereUniqueInput!, create: FeedbackTargetCreateInput!, update: FeedbackTargetUpdateInput!): FeedbackTarget!
  deleteFeedbackTarget(where: FeedbackTargetWhereUniqueInput!): FeedbackTarget
  deleteManyFeedbackTargets(where: FeedbackTargetWhereInput): BatchPayload!
  createMedia(data: MediaCreateInput!): Media!
  updateMedia(data: MediaUpdateInput!, where: MediaWhereUniqueInput!): Media
  updateManyMedias(data: MediaUpdateManyMutationInput!, where: MediaWhereInput): BatchPayload!
  upsertMedia(where: MediaWhereUniqueInput!, create: MediaCreateInput!, update: MediaUpdateInput!): Media!
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteManyMedias(where: MediaWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createScript(data: ScriptCreateInput!): Script!
  deleteScript(where: ScriptWhereUniqueInput!): Script
  deleteManyScripts(where: ScriptWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department!]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  name: String!
  createdBy: UserCreateOneWithoutProjectsInput
  departments: DepartmentCreateManyWithoutProjectsInput
}

input ProjectCreateManyWithoutCreatedByInput {
  create: [ProjectCreateWithoutCreatedByInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutDepartmentsInput {
  create: [ProjectCreateWithoutDepartmentsInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutCreatedByInput {
  id: ID
  name: String!
  departments: DepartmentCreateManyWithoutProjectsInput
}

input ProjectCreateWithoutDepartmentsInput {
  id: ID
  name: String!
  createdBy: UserCreateOneWithoutProjectsInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateDataInput {
  name: String
  createdBy: UserUpdateOneWithoutProjectsInput
  departments: DepartmentUpdateManyWithoutProjectsInput
}

input ProjectUpdateInput {
  name: String
  createdBy: UserUpdateOneWithoutProjectsInput
  departments: DepartmentUpdateManyWithoutProjectsInput
}

input ProjectUpdateManyDataInput {
  name: String
}

input ProjectUpdateManyMutationInput {
  name: String
}

input ProjectUpdateManyWithoutCreatedByInput {
  create: [ProjectCreateWithoutCreatedByInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithoutDepartmentsInput {
  create: [ProjectCreateWithoutDepartmentsInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutDepartmentsInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutDepartmentsInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateOneRequiredInput {
  create: ProjectCreateInput
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateWithoutCreatedByDataInput {
  name: String
  departments: DepartmentUpdateManyWithoutProjectsInput
}

input ProjectUpdateWithoutDepartmentsDataInput {
  name: String
  createdBy: UserUpdateOneWithoutProjectsInput
}

input ProjectUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutCreatedByDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutDepartmentsInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutDepartmentsDataInput!
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutCreatedByDataInput!
  create: ProjectCreateWithoutCreatedByInput!
}

input ProjectUpsertWithWhereUniqueWithoutDepartmentsInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutDepartmentsDataInput!
  create: ProjectCreateWithoutDepartmentsInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
  departments_every: DepartmentWhereInput
  departments_some: DepartmentWhereInput
  departments_none: DepartmentWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  feedbackRound(where: FeedbackRoundWhereUniqueInput!): FeedbackRound
  feedbackRounds(where: FeedbackRoundWhereInput, orderBy: FeedbackRoundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedbackRound]!
  feedbackRoundsConnection(where: FeedbackRoundWhereInput, orderBy: FeedbackRoundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackRoundConnection!
  feedbackTarget(where: FeedbackTargetWhereUniqueInput!): FeedbackTarget
  feedbackTargets(where: FeedbackTargetWhereInput, orderBy: FeedbackTargetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedbackTarget]!
  feedbackTargetsConnection(where: FeedbackTargetWhereInput, orderBy: FeedbackTargetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackTargetConnection!
  media(where: MediaWhereUniqueInput!): Media
  medias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media]!
  mediasConnection(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  script(where: ScriptWhereUniqueInput!): Script
  scripts(where: ScriptWhereInput, orderBy: ScriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Script]!
  scriptsConnection(where: ScriptWhereInput, orderBy: ScriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScriptConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Script {
  id: ID!
}

type ScriptConnection {
  pageInfo: PageInfo!
  edges: [ScriptEdge]!
  aggregate: AggregateScript!
}

input ScriptCreateInput {
  id: ID
}

type ScriptEdge {
  node: Script!
  cursor: String!
}

enum ScriptOrderByInput {
  id_ASC
  id_DESC
}

type ScriptPreviousValues {
  id: ID!
}

type ScriptSubscriptionPayload {
  mutation: MutationType!
  node: Script
  updatedFields: [String!]
  previousValues: ScriptPreviousValues
}

input ScriptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScriptWhereInput
  AND: [ScriptSubscriptionWhereInput!]
  OR: [ScriptSubscriptionWhereInput!]
  NOT: [ScriptSubscriptionWhereInput!]
}

input ScriptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ScriptWhereInput!]
  OR: [ScriptWhereInput!]
  NOT: [ScriptWhereInput!]
}

input ScriptWhereUniqueInput {
  id: ID
}

type Subscription {
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  feedbackRound(where: FeedbackRoundSubscriptionWhereInput): FeedbackRoundSubscriptionPayload
  feedbackTarget(where: FeedbackTargetSubscriptionWhereInput): FeedbackTargetSubscriptionPayload
  media(where: MediaSubscriptionWhereInput): MediaSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  script(where: ScriptSubscriptionWhereInput): ScriptSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  feedbackRounds(where: FeedbackRoundWhereInput, orderBy: FeedbackRoundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedbackRound!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutCreatedByInput
  feedbackRounds: FeedbackRoundCreateManyWithoutUsersInput
}

input UserCreateManyWithoutFeedbackRoundsInput {
  create: [UserCreateWithoutFeedbackRoundsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFeedbackRoundsInput {
  id: ID
  name: String
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutCreatedByInput
}

input UserCreateWithoutProjectsInput {
  id: ID
  name: String
  email: String!
  password: String!
  feedbackRounds: FeedbackRoundCreateManyWithoutUsersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutCreatedByInput
  feedbackRounds: FeedbackRoundUpdateManyWithoutUsersInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutCreatedByInput
  feedbackRounds: FeedbackRoundUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyWithoutFeedbackRoundsInput {
  create: [UserCreateWithoutFeedbackRoundsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFeedbackRoundsDataInput {
  name: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutProjectsDataInput {
  name: String
  email: String
  password: String
  feedbackRounds: FeedbackRoundUpdateManyWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutFeedbackRoundsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFeedbackRoundsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserUpsertWithWhereUniqueWithoutFeedbackRoundsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFeedbackRoundsDataInput!
  create: UserCreateWithoutFeedbackRoundsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  feedbackRounds_every: FeedbackRoundWhereInput
  feedbackRounds_some: FeedbackRoundWhereInput
  feedbackRounds_none: FeedbackRoundWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`