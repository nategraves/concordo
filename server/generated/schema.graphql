### This file was autogenerated by Nexus 0.9.17
### Do not make changes to this file directly


scalar DateTime

type FeedbackMedia {
  createdAt: DateTime!
  id: ID!
  name: String!
  subject: FeedbackProject!
  updatedAt: DateTime!
}

enum FeedbackMediaOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FeedbackMediaWhereInput {
  AND: [FeedbackMediaWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [FeedbackMediaWhereInput!]
  OR: [FeedbackMediaWhereInput!]
  subject: FeedbackProjectWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type FeedbackProject {
  createdAt: DateTime!
  createdBy: User
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input FeedbackProjectCreateInput {
  createdBy: UserCreateOneWithoutFeedbackProjectsInput
  id: ID
  name: String!
}

input FeedbackProjectCreateManyWithoutCreatedByInput {
  connect: [FeedbackProjectWhereUniqueInput!]
  create: [FeedbackProjectCreateWithoutCreatedByInput!]
}

input FeedbackProjectCreateOneInput {
  connect: FeedbackProjectWhereUniqueInput
  create: FeedbackProjectCreateInput
}

input FeedbackProjectCreateWithoutCreatedByInput {
  id: ID
  name: String!
}

enum FeedbackProjectOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FeedbackProjectWhereInput {
  AND: [FeedbackProjectWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  createdBy: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [FeedbackProjectWhereInput!]
  OR: [FeedbackProjectWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input FeedbackProjectWhereUniqueInput {
  id: ID
}

type FeedbackRound {
  createdAt: DateTime!
  id: ID!
  roundEnd: DateTime
  updatedAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

input FeedbackRoundCreateManyWithoutUsersInput {
  connect: [FeedbackRoundWhereUniqueInput!]
  create: [FeedbackRoundCreateWithoutUsersInput!]
}

input FeedbackRoundCreateWithoutUsersInput {
  id: ID
  roundEnd: DateTime
}

enum FeedbackRoundOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  roundEnd_ASC
  roundEnd_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FeedbackRoundWhereInput {
  AND: [FeedbackRoundWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [FeedbackRoundWhereInput!]
  OR: [FeedbackRoundWhereInput!]
  roundEnd: DateTime
  roundEnd_gt: DateTime
  roundEnd_gte: DateTime
  roundEnd_in: [DateTime!]
  roundEnd_lt: DateTime
  roundEnd_lte: DateTime
  roundEnd_not: DateTime
  roundEnd_not_in: [DateTime!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  users_every: UserWhereInput
  users_none: UserWhereInput
  users_some: UserWhereInput
}

input FeedbackRoundWhereUniqueInput {
  id: ID
}

type FeedbackSubject {
  createdAt: DateTime!
  createdBy: User
  id: ID!
  name: String!
  project: FeedbackProject!
  updatedAt: DateTime!
}

input FeedbackSubjectCreateInput {
  createdBy: UserCreateOneInput
  id: ID
  name: String!
  project: FeedbackProjectCreateOneInput!
}

enum FeedbackSubjectOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FeedbackSubjectWhereInput {
  AND: [FeedbackSubjectWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  createdBy: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [FeedbackSubjectWhereInput!]
  OR: [FeedbackSubjectWhereInput!]
  project: FeedbackProjectWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type Mutation {
  createFeedbackProject(data: FeedbackProjectCreateInput!): FeedbackProject!
  createFeedbackSubject(data: FeedbackSubjectCreateInput!): FeedbackSubject!
  createUser(data: UserCreateInput!): User!
}

type Query {
  feedbackMedias(after: String, before: String, first: Int, last: Int, orderBy: FeedbackMediaOrderByInput, skip: Int, where: FeedbackMediaWhereInput): [FeedbackMedia!]!
  feedbackProjects(after: String, before: String, first: Int, last: Int, orderBy: FeedbackProjectOrderByInput, skip: Int, where: FeedbackProjectWhereInput): [FeedbackProject!]!
  feedbackSubjects(after: String, before: String, first: Int, last: Int, orderBy: FeedbackSubjectOrderByInput, skip: Int, where: FeedbackSubjectWhereInput): [FeedbackSubject!]!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

type User {
  createdAt: DateTime!
  email: String!
  feedbackProjects(after: String, before: String, first: Int, last: Int, orderBy: FeedbackProjectOrderByInput, skip: Int, where: FeedbackProjectWhereInput): [FeedbackProject!]
  feedbackRounds(after: String, before: String, first: Int, last: Int, orderBy: FeedbackRoundOrderByInput, skip: Int, where: FeedbackRoundWhereInput): [FeedbackRound!]
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input UserCreateInput {
  email: String!
  feedbackProjects: FeedbackProjectCreateManyWithoutCreatedByInput
  feedbackRounds: FeedbackRoundCreateManyWithoutUsersInput
  id: ID
  name: String!
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutFeedbackProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFeedbackProjectsInput
}

input UserCreateWithoutFeedbackProjectsInput {
  email: String!
  feedbackRounds: FeedbackRoundCreateManyWithoutUsersInput
  id: ID
  name: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  feedbackProjects_every: FeedbackProjectWhereInput
  feedbackProjects_none: FeedbackProjectWhereInput
  feedbackProjects_some: FeedbackProjectWhereInput
  feedbackRounds_every: FeedbackRoundWhereInput
  feedbackRounds_none: FeedbackRoundWhereInput
  feedbackRounds_some: FeedbackRoundWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
