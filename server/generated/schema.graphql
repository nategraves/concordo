### This file was autogenerated by Nexus 0.9.17
### Do not make changes to this file directly


scalar DateTime

type Department {
  id: ID!
  name: String!
  projects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
}

input DepartmentCreateInput {
  id: ID
  name: String!
  projects: ProjectCreateManyWithoutDepartmentsInput
}

input DepartmentCreateManyWithoutProjectsInput {
  connect: [DepartmentWhereUniqueInput!]
  create: [DepartmentCreateWithoutProjectsInput!]
}

input DepartmentCreateWithoutProjectsInput {
  id: ID
  name: String!
}

enum DepartmentOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  projects_every: ProjectWhereInput
  projects_none: ProjectWhereInput
  projects_some: ProjectWhereInput
}

input DepartmentWhereUniqueInput {
  id: ID
}

type FeedbackRound {
  createdAt: DateTime!
  id: ID!
  roundEnd: DateTime
  updatedAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

input FeedbackRoundCreateInput {
  id: ID
  roundEnd: DateTime
  users: UserCreateManyWithoutFeedbackRoundsInput
}

input FeedbackRoundCreateManyWithoutUsersInput {
  connect: [FeedbackRoundWhereUniqueInput!]
  create: [FeedbackRoundCreateWithoutUsersInput!]
}

input FeedbackRoundCreateWithoutUsersInput {
  id: ID
  roundEnd: DateTime
}

enum FeedbackRoundOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  roundEnd_ASC
  roundEnd_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FeedbackRoundWhereInput {
  AND: [FeedbackRoundWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [FeedbackRoundWhereInput!]
  OR: [FeedbackRoundWhereInput!]
  roundEnd: DateTime
  roundEnd_gt: DateTime
  roundEnd_gte: DateTime
  roundEnd_in: [DateTime!]
  roundEnd_lt: DateTime
  roundEnd_lte: DateTime
  roundEnd_not: DateTime
  roundEnd_not_in: [DateTime!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  users_every: UserWhereInput
  users_none: UserWhereInput
  users_some: UserWhereInput
}

input FeedbackRoundWhereUniqueInput {
  id: ID
}

type FeedbackTarget {
  createdAt: DateTime!
  createdBy: User
  id: ID!
  name: String!
  project: Project!
  updatedAt: DateTime!
}

input FeedbackTargetCreateInput {
  createdBy: UserCreateOneInput
  id: ID
  name: String!
  project: ProjectCreateOneInput!
}

input FeedbackTargetCreateOneInput {
  connect: FeedbackTargetWhereUniqueInput
  create: FeedbackTargetCreateInput
}

enum FeedbackTargetOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FeedbackTargetWhereInput {
  AND: [FeedbackTargetWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  createdBy: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [FeedbackTargetWhereInput!]
  OR: [FeedbackTargetWhereInput!]
  project: ProjectWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input FeedbackTargetWhereUniqueInput {
  id: ID
}

type Media {
  createdAt: DateTime!
  id: ID!
  name: String!
  target: FeedbackTarget!
  updatedAt: DateTime!
}

input MediaCreateInput {
  id: ID
  name: String!
  target: FeedbackTargetCreateOneInput!
}

enum MediaOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  target: FeedbackTargetWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input MediaWhereUniqueInput {
  id: ID
}

type Mutation {
  createDepartment(data: DepartmentCreateInput!): Department!
  createFeedbackRound(data: FeedbackRoundCreateInput!): FeedbackRound!
  createFeedbackTarget(data: FeedbackTargetCreateInput!): FeedbackTarget!
  createMedia(data: MediaCreateInput!): Media!
  createProject(data: ProjectCreateInput!): Project!
  createScript(data: ScriptCreateInput!): Script!
  createUser(data: UserCreateInput!): User!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteProject(where: ProjectWhereUniqueInput!): Project
}

type Project {
  createdAt: DateTime!
  createdBy: User
  departments(after: String, before: String, first: Int, last: Int, orderBy: DepartmentOrderByInput, skip: Int, where: DepartmentWhereInput): [Department!]
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input ProjectCreateInput {
  createdBy: UserCreateOneWithoutProjectsInput
  departments: DepartmentCreateManyWithoutProjectsInput
  id: ID
  name: String!
}

input ProjectCreateManyWithoutCreatedByInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutCreatedByInput!]
}

input ProjectCreateManyWithoutDepartmentsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutDepartmentsInput!]
}

input ProjectCreateOneInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateInput
}

input ProjectCreateWithoutCreatedByInput {
  departments: DepartmentCreateManyWithoutProjectsInput
  id: ID
  name: String!
}

input ProjectCreateWithoutDepartmentsInput {
  createdBy: UserCreateOneWithoutProjectsInput
  id: ID
  name: String!
}

enum ProjectOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  createdBy: UserWhereInput
  departments_every: DepartmentWhereInput
  departments_none: DepartmentWhereInput
  departments_some: DepartmentWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  department(where: DepartmentWhereUniqueInput!): Department
  departments(after: String, before: String, first: Int, last: Int, orderBy: DepartmentOrderByInput, skip: Int, where: DepartmentWhereInput): [Department!]!
  feedbackRound(where: FeedbackRoundWhereUniqueInput!): FeedbackRound
  feedbackRounds(after: String, before: String, first: Int, last: Int, orderBy: FeedbackRoundOrderByInput, skip: Int, where: FeedbackRoundWhereInput): [FeedbackRound!]!
  feedbackTarget(where: FeedbackTargetWhereUniqueInput!): FeedbackTarget
  feedbackTargets(after: String, before: String, first: Int, last: Int, orderBy: FeedbackTargetOrderByInput, skip: Int, where: FeedbackTargetWhereInput): [FeedbackTarget!]!
  media(where: MediaWhereUniqueInput!): Media
  medias(after: String, before: String, first: Int, last: Int, orderBy: MediaOrderByInput, skip: Int, where: MediaWhereInput): [Media!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]!
  script(where: ScriptWhereUniqueInput!): Script
  scripts(after: String, before: String, first: Int, last: Int, orderBy: ScriptOrderByInput, skip: Int, where: ScriptWhereInput): [Script!]!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

type Script {
  id: ID!
}

input ScriptCreateInput {
  id: ID
}

enum ScriptOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ScriptWhereInput {
  AND: [ScriptWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ScriptWhereInput!]
  OR: [ScriptWhereInput!]
}

input ScriptWhereUniqueInput {
  id: ID
}

type User {
  createdAt: DateTime!
  email: String!
  feedbackRounds(after: String, before: String, first: Int, last: Int, orderBy: FeedbackRoundOrderByInput, skip: Int, where: FeedbackRoundWhereInput): [FeedbackRound!]
  id: ID!
  name: String!
  projects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
  updatedAt: DateTime!
}

input UserCreateInput {
  email: String!
  feedbackRounds: FeedbackRoundCreateManyWithoutUsersInput
  id: ID
  name: String!
  projects: ProjectCreateManyWithoutCreatedByInput
}

input UserCreateManyWithoutFeedbackRoundsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFeedbackRoundsInput!]
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectsInput
}

input UserCreateWithoutFeedbackRoundsInput {
  email: String!
  id: ID
  name: String!
  projects: ProjectCreateManyWithoutCreatedByInput
}

input UserCreateWithoutProjectsInput {
  email: String!
  feedbackRounds: FeedbackRoundCreateManyWithoutUsersInput
  id: ID
  name: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  feedbackRounds_every: FeedbackRoundWhereInput
  feedbackRounds_none: FeedbackRoundWhereInput
  feedbackRounds_some: FeedbackRoundWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  projects_every: ProjectWhereInput
  projects_none: ProjectWhereInput
  projects_some: ProjectWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
